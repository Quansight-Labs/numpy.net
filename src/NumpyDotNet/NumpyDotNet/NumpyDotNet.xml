<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NumpyDotNet</name>
    </assembly>
    <members>
        <member name="T:NumpyDotNet.np">
            <summary>
            Implements array manipulation and construction functionality.  This
            class has functionality corresponding to functions in arrayobject.c,
            ctors.c, and multiarraymodule.c
            </summary>
            <summary>
            implements functions similar to npyio.py
            </summary>
        </member>
        <member name="M:NumpyDotNet.np.ediff1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray)">
            <summary>
            The differences between consecutive elements of an array.
            </summary>
            <param name="ary">If necessary, will be flattened before the differences are taken.</param>
            <param name="to_end">Number(s) to append at the end of the returned differences.</param>
            <param name="to_begin">Number(s) to prepend at the beginning of the returned differences.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.unique(NumpyDotNet.ndarray,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Find the unique elements of an array.
            </summary>
            <param name="ar">Input array. Unless `axis` is specified, this will be flattened if it is not already 1-D.</param>
            <param name="return_index">If True, also return the indices of `ar` (along the specified axis, if provided, or in the flattened array) that result in the unique array.</param>
            <param name="return_inverse">If True, also return the indices of the unique array (for the specified axis, if provided) that can be used to reconstruct `ar`.</param>
            <param name="return_counts">If True, also return the number of times each unique item appears in `ar`.</param>
            <param name="axis">The axis to operate on. If null, `ar` will be flattened.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.intersect1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Find the intersection of two arrays.
            </summary>
            <param name="ar1">Input array</param>
            <param name="ar2">Input array</param>
            <param name="assume_unique">If True, the input arrays are both assumed to be unique, which can speed up the calculation.Default is False.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.setxor1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Find the set exclusive-or of two arrays.
            </summary>
            <param name="ar1">Input array</param>
            <param name="ar2">Input array</param>
            <param name="assume_unique">If True, the input arrays are both assumed to be unique, which can speed up the calculation.Default is False.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.in1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Boolean,System.Boolean)">
            <summary>
            Test whether each element of a 1-D array is also present in a second array.
            </summary>
            <param name="ar1">Input array</param>
            <param name="ar2">The values against which to test each value of `ar1`.</param>
            <param name="assume_unique">If True, the input arrays are both assumed to be unique, which can speed up the calculation.Default is False.</param>
            <param name="invert">If True, the values in the returned array are inverted</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isin(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Boolean,System.Boolean)">
            <summary>
            Calculates element in test_elements, broadcasting over element only.
            </summary>
            <param name="element">Input array</param>
            <param name="test_elements">The values against which to test each value of `element`</param>
            <param name="assume_unique">If True, the input arrays are both assumed to be unique</param>
            <param name="invert">If True, the values in the returned array are inverted</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.union1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray)">
            <summary>
            Find the union of two arrays
            </summary>
            <param name="ar1">Input array</param>
            <param name="ar2">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.setdiff1d(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Find the set difference of two arrays.
            </summary>
            <param name="ar1">Input array</param>
            <param name="ar2">Input comparison array</param>
            <param name="assume_unique">If True, the input arrays are both assumed to be unique.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ufunc.accumulate(NumpyLib.UFuncOperation,System.Object,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Accumulate the result of applying the operator to all elements.
            </summary>
            <param name="operation">ufunc operation to perform</param>
            <param name="a">The array to act on.</param>
            <param name="axis">The axis along which to apply the accumulation; default is zero.</param>
            <param name="out">A location into which the result is stored.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ufunc.reduce(NumpyLib.UFuncOperation,System.Object,System.Int32,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Reduces array’s dimension by one, by applying ufunc along one axis.
            </summary>
            <param name="operation">ufunc operation to peform</param>
            <param name="a">The array to act on.</param>
            <param name="axis">Axis or axes along which a reduction is performed. </param>
            <param name="out">A location into which the result is stored.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ufunc.reduceat(NumpyLib.UFuncOperation,System.Object,System.Object,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Performs a (local) reduce with specified slices over a single axis.
            </summary>
            <param name="operation">ufunc operation to peform</param>
            <param name="a">The array to act on.</param>
            <param name="indices">Paired indices, comma separated (not colon), specifying slices to reduce</param>
            <param name="axis">A location into which the result is stored..</param>
            <param name="out">A location into which the result is stored. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ufunc.outer(NumpyLib.UFuncOperation,NumpyDotNet.dtype,System.Object,System.Object,NumpyDotNet.ndarray)">
            <summary>
            Apply the ufunc op to all pairs (a, b) with a in A and b in B.
            </summary>
            <param name="operation">ufunc operation to perform</param>
            <param name="dtype"></param>
            <param name="a">First array</param>
            <param name="b">Second array</param>
            <param name="out">A location into which the result is stored.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsBoolArray(System.Object)">
            <summary>
            Returns bool array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsSByteArray(System.Object)">
            <summary>
            Returns sbyte array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsByteArray(System.Object)">
            <summary>
            Returns byte array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsInt16Array(System.Object)">
            <summary>
            Returns Int16 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsUInt16Array(System.Object)">
            <summary>
            Returns UInt16 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsInt32Array(System.Object)">
            <summary>
            Returns Int32 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsUInt32Array(System.Object)">
            <summary>
            Returns UInt32 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsInt64Array(System.Object)">
            <summary>
            Returns Int64 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsUInt64Array(System.Object)">
            <summary>
            Returns UInt64 array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsFloatArray(System.Object)">
            <summary>
            Returns float array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsDoubleArray(System.Object)">
            <summary>
            Returns double array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsDecimalArray(System.Object)">
            <summary>
            Returns decimal array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsComplexArray(System.Object)">
            <summary>
            Returns Complex array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsBigIntArray(System.Object)">
            <summary>
            Returns BigInt array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsObjectArray(System.Object)">
            <summary>
            Returns Object array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.AsStringArray(System.Object)">
            <summary>
            Returns String array.  Converts if necessary
            </summary>
            <param name="oa"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.take(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Take elements from an array along an axis.
            </summary>
            <param name="a">The source array.</param>
            <param name="indices">The indices of the values to extract.</param>
            <param name="axis">The axis over which to select values. By default, the flattened input array is used.</param>
            <param name="_out">If provided, the result will be placed in this array.</param>
            <param name="mode">{'raise', 'wrap', 'clip'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.reshape(NumpyDotNet.ndarray,NumpyDotNet.shape,NumpyLib.NPY_ORDER)">
            <summary>
            Gives a new shape to an array without changing its data.
            </summary>
            <param name="a">Array to be reshaped</param>
            <param name="newshape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <param name="order">(Optional) {‘C’, ‘F’, ‘A’} ,Read the elements of a using this index order, and place the elements into the reshaped array using this index order. ‘C’ means to read / write the elements using C-like index order </param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy.Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
        </member>
        <member name="M:NumpyDotNet.np.choose(NumpyDotNet.ndarray,System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray},NumpyDotNet.ndarray,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Construct an array from an index array and a set of arrays to choose from.
            </summary>
            <param name="a">This array must contain integers in `[0, n-1]`, where `n` is the number of choices,</param>
            <param name="choices">sequence of arrays Choice arrays. `a` and all of the choices must be broadcastable to the same shape</param>
            <param name="out"> If provided, the result will be inserted into this array.</param>
            <param name="mode">{'raise' (default), 'wrap', 'clip'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.repeat(System.Object,System.Object,System.Nullable{System.Int32})">
            <summary>
            Repeat elements of an array
            </summary>
            <param name="a">Input array</param>
            <param name="repeats">The number of repetitions for each element.</param>
            <param name="axis">The axis along which to repeat values.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.put(NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Replaces specified elements of an array with given values.
            </summary>
            <param name="a">Target array.</param>
            <param name="ind">Target indices, interpreted as integers.</param>
            <param name="v">Values to place in `a` at target indices.</param>
            <param name="mode">{'raise', 'wrap', 'clip'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.put(NumpyDotNet.ndarray,System.Object,System.Object,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Replaces specified elements of an array with given values.
            </summary>
            <param name="a">Target array.</param>
            <param name="ind">Target indices, interpreted as integers.</param>
            <param name="v">Values to place in `a` at target indices.</param>
            <param name="mode">{'raise', 'wrap', 'clip'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.swapaxes(NumpyDotNet.ndarray,System.Int32,System.Int32)">
            <summary>
            Interchange two axes of an array.
            </summary>
            <param name="a"></param>
            <param name="axis1">First axis.</param>
            <param name="axis2">Second axis.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.transpose(NumpyDotNet.ndarray,System.Int64[])">
            <summary>
            Permute the dimensions of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axes">list of ints, optional.By default, reverse the dimensions, otherwise permute the axes according to the values given.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.transpose(NumpyDotNet.ndarray[],System.Int64[])">
            <summary>
            Permute the dimensions of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axes">list of ints, optional.By default, reverse the dimensions, otherwise permute the axes according to the values given.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.transpose(NumpyDotNet.ndarray,System.Int32[])">
            <summary>
            Permute the dimensions of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axes">list of ints, optional.By default, reverse the dimensions, otherwise permute the axes according to the values given.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.partition(NumpyDotNet.ndarray,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return a partitioned copy of an array.
            </summary>
            <param name="a">Array to be sorted.</param>
            <param name="kth">Element index to partition by.</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Selection algorithm.</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.partition(NumpyDotNet.ndarray,System.Int32,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return a partitioned copy of an array.
            </summary>
            <param name="a">Array to be sorted.</param>
            <param name="kth">Element index to partition by.</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Selection algorithm.</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argpartition(NumpyDotNet.ndarray,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword.
            </summary>
            <param name="a">Array to sort</param>
            <param name="kth">Element index to partition by.</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Selection algorithm</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argpartition(NumpyDotNet.ndarray,System.Int32,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword.
            </summary>
            <param name="a">Array to sort</param>
            <param name="kth">Element index to partition by.</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Selection algorithm</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sort(System.Object,System.Nullable{System.Int32},NumpyLib.NPY_SORTKIND,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return a sorted copy of an array.
            </summary>
            <param name="a">Array to be sorted.</param>
            <param name="axis">Axis along which to sort</param>
            <param name="kind">{'quicksort', 'mergesort', 'heapsort'}, optional</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argsort(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyLib.NPY_SORTKIND,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the indices that would sort an array.
            </summary>
            <param name="a">Array to sort.</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">{'quicksort', 'mergesort', 'heapsort'}, optional</param>
            <param name="order">str or list of str, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argmax(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Returns the indices of the maximum values along an axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <param name="out">If provided, the result will be inserted into this array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argmin(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Returns the indices of the minimum values along an axis.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <param name="out">If provided, the result will be inserted into this array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.searchsorted(NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyLib.NPY_SEARCHSIDE,NumpyDotNet.ndarray)">
            <summary>
            Find indices where elements should be inserted to maintain order.
            </summary>
            <param name="a">1-D array_like</param>
            <param name="v">Values to insert into `a`</param>
            <param name="side"> {'left', 'right'}</param>
            <param name="sorter">Optional array of integer indices that sort array a into ascending order.They are typically the result of argsort.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.searchsorted(NumpyDotNet.ndarray,System.Object,NumpyLib.NPY_SEARCHSIDE)">
            <summary>
            Find indices where elements should be inserted to maintain order.
            </summary>
            <param name="a">1-D array_like</param>
            <param name="v">Values to insert into `a`</param>
            <param name="side"> {'left', 'right'}</param>
            <param name="sorter">Optional array of integer indices that sort array a into ascending order.They are typically the result of argsort.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.resize(NumpyDotNet.ndarray,NumpyDotNet.shape)">
            <summary>
            Return a new array with the specified shape.
            </summary>
            <param name="a">Array to be resized</param>
            <param name="new_shape">Shape of resized array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.resize(NumpyDotNet.ndarray,System.Int64[])">
            <summary>
            Return a new array with the specified shape.
            </summary>
            <param name="a">Array to be resized</param>
            <param name="newdims">Shape of resized array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.squeeze(NumpyDotNet.ndarray,System.Nullable{System.Int32})">
            <summary>
            Remove single-dimensional entries from the shape of an array
            </summary>
            <param name="a">Input data</param>
            <param name="axis">Selects a subset of the single-dimensional entries in the shape</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.diagonal(NumpyDotNet.ndarray,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return specified diagonals
            </summary>
            <param name="a">Array from which the diagonals are taken</param>
            <param name="offset">Offset of the diagonal from the main diagonal</param>
            <param name="axis1">Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <param name="axis2">Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.trace(NumpyDotNet.ndarray,System.Int32,System.Int32,System.Int32,NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the sum along diagonals of the array.
            </summary>
            <param name="a">Input array, from which the diagonals are taken.</param>
            <param name="offset">Offset of the diagonal from the main diagonal.</param>
            <param name="axis1">Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <param name="axis2">Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <param name="dtype">Determines the data-type of the returned array and of the accumulator where the elements are summed.</param>
            <param name="out">Array into which the output is placed</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ravel(NumpyDotNet.ndarray,NumpyLib.NPY_ORDER)">
            <summary>
            Return a contiguous flattened array.
            </summary>
            <param name="a">Input array.</param>
            <param name="order">{'C','F', 'A', 'K'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ravel(System.Array,NumpyLib.NPY_ORDER)">
            <summary>
            Return a contiguous flattened array.
            </summary>
            <param name="a">Input array.</param>
            <param name="order">{'C','F', 'A', 'K'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ravel(System.Object,NumpyDotNet.dtype)">
            <summary>
            Return a contiguous flattened array.
            </summary>
            <param name="a">Input array.</param>
            <param name="order">{'C','F', 'A', 'K'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nonzero(NumpyDotNet.ndarray)">
            <summary>
            Return the indices of the elements that are non-zero.
            </summary>
            <param name="a">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.shape(NumpyDotNet.ndarray)">
            <summary>
            Return the shape of an array.
            </summary>
            <param name="a">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.compress(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Return selected slices of an array along given axis.
            </summary>
            <param name="condition">Array that selects which entries to return.</param>
            <param name="a">Array from which to extract a part.</param>
            <param name="axis">Axis along which to take slices.</param>
            <param name="out">Output array, if specified</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.compress(System.Object,NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray)">
            <summary>
            Return selected slices of an array along given axis.
            </summary>
            <param name="condition">Array that selects which entries to return.</param>
            <param name="a">Array from which to extract a part.</param>
            <param name="axis">Axis along which to take slices.</param>
            <param name="out">Output array, if specified</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.clip(NumpyDotNet.ndarray,System.Object,System.Object,NumpyDotNet.ndarray)">
            <summary>
            Clip (limit) the values in an array.
            </summary>
            <param name="a">Array containing elements to clip.</param>
            <param name="a_min">Minimum value</param>
            <param name="a_max">maximum  value</param>
            <param name="out">The results will be placed in this array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sum(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="ret">Alternative output array in which to place the result</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.anyb(System.Object,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            helper function to convert the results of np.any to a boolean value
            </summary>
            <param name="a"></param>
            <param name="axis"></param>
            <param name="out"></param>
            <param name="keepdims"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.any(System.Object,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Test whether any array element along a given axis evaluates to True.
            </summary>
            <param name="a">Input array or object</param>
            <param name="axis">Axis or axes along which a logical OR reduction is performed.</param>
            <param name="out">Alternate output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.allb(System.Object,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            helper function to convert the results of np.all to a boolean value
            </summary>
            <param name="a"></param>
            <param name="axis"></param>
            <param name="out"></param>
            <param name="keepdims"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.all(System.Object,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Test whether all array elements along a given axis evaluate to True.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">Axis or axes along which a logical AND reduction is performed.</param>
            <param name="out">Alternate output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cumsum(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative sum of the elements along a given axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">Axis along which the cumulative sum is computed.</param>
            <param name="dtype">Type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="ret">Alternative output array in which to place the result</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ptp(NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Range of values (maximum - minimum) along an axis.
            </summary>
            <param name="a">Input values.</param>
            <param name="axis">Axis along which to find the peaks.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.amax(System.Object,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.max(System.Object,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.amin(System.Object,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.min(System.Object,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.alen(NumpyDotNet.ndarray)">
            <summary>
            Return the length of the first dimension of the input array.
            </summary>
            <param name="a">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.prod(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the product of array elements over a given axis.
            </summary>
            <param name="a">Input data</param>
            <param name="axis">Axis or axes along which a product is performed.</param>
            <param name="dtype">The type of the returned array, as well as of the accumulator in which the elements are multiplied.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cumprod(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative product of elements along a given axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">Axis along which the cumulative product is computed.</param>
            <param name="dtype">Type of the returned array, as well as of the accumulator in which the elements are multiplied. </param>
            <param name="out">Alternative output array in which to place the result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ndim(NumpyDotNet.ndarray)">
            <summary>
            Return the number of dimensions of an array.
            </summary>
            <param name="a">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.size(NumpyDotNet.ndarray,System.Nullable{System.Int32})">
            <summary>
            Return the number of elements along a given axis.
            </summary>
            <param name="a">Input data</param>
            <param name="axis">Axis along which the elements are counted.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.around(NumpyDotNet.ndarray,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Evenly round to the given number of decimals.
            </summary>
            <param name="a">Input data</param>
            <param name="decimals">Number of decimal places to round to (default: 0).</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.round_(NumpyDotNet.ndarray,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Evenly round to the given number of decimals.
            </summary>
            <param name="a">Input data</param>
            <param name="decimals">Number of decimal places to round to (default: 0).</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.round(NumpyDotNet.ndarray,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Evenly round to the given number of decimals.
            </summary>
            <param name="a">Input data</param>
            <param name="decimals">Number of decimal places to round to (default: 0).</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.mean(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Boolean)">
            <summary>
            Compute the arithmetic mean along the specified axis.
            </summary>
            <param name="input">Array containing numbers whose mean is desired</param>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened arra</param>
            <param name="dtype">Type to use in computing the mean. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype.</param>
            <returns>ndarray, see dtype parameter above</returns>
        </member>
        <member name="M:NumpyDotNet.np.average(System.Object,System.Nullable{System.Int32},System.Object)">
            <summary>
            Compute the weighted average along the specified axis.
            </summary>
            <param name="a">Array containing data to be averaged.</param>
            <param name="axis">Axis or axes along which to average a.</param>
            <param name="weights">An array of weights associated with the values in a. Each value in a contributes to the average according to its associated weight.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.average(System.Object,System.Nullable{System.Int32},System.Object,System.Boolean)">
            <summary>
            Compute the weighted average along the specified axis.
            </summary>
            <param name="a">Array containing data to be averaged.</param>
            <param name="axis">Axis or axes along which to average a.</param>
            <param name="weights">An array of weights associated with the values in a. Each value in a contributes to the average according to its associated weight.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.std(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Int32,System.Boolean)">
            <summary>
            Compute the standard deviation along the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed.</param>
            <param name="dtype">Type to use in computing the standard deviation.</param>
            <param name="ddof">Means Delta Degrees of Freedom.</param>
            <param name="keep_dims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.var(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Int32,System.Boolean)">
            <summary>
            Compute the variance along the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired.</param>
            <param name="axis">Axis or axes along which the variance is computed.</param>
            <param name="dtype">Type to use in computing the variance.</param>
            <param name="ddof">"Delta Degrees of Freedom": the divisor used in the calculation</param>
            <param name="keep_dims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.rot90(NumpyDotNet.ndarray,System.Int32,System.Int32[])">
            <summary>
            Rotate an array by 90 degrees in the plane specified by axes.
            </summary>
            <param name="m">Array of two or more dimensions.</param>
            <param name="k">Number of times the array is rotated by 90 degrees.</param>
            <param name="axes">The array is rotated in the plane defined by the axes. Axes must be different.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.flip(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Reverse the order of elements in an array along the given axis.
            </summary>
            <param name="m">Input array.</param>
            <param name="axis">Axis in array, which entries are reversed.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.iterable(System.Object)">
            <summary>
            Check whether or not an object can be iterated over.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.asarray_chkfinite(NumpyDotNet.ndarray,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            onvert the input to an array, checking for NaNs or Infs.
            </summary>
            <param name="a">Input data, in any form that can be converted to an array</param>
            <param name="dtype">data-type, optional</param>
            <param name="order">{'C', 'F'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.piecewise(NumpyDotNet.ndarray,System.Boolean[],System.Object[],System.String[],System.String[])">
            <summary>
            Evaluate a piecewise-defined function.
            </summary>
            <param name="x">The input domain.</param>
            <param name="condlist">list of bool arrays or bool scalars</param>
            <param name="funclist">list of callables, f(x,*args,**kw), or scalars</param>
            <param name="args">Any further arguments given to `piecewise` are passed to the functions upon execution</param>
            <param name="kw">Keyword arguments used in calling `piecewise` are passed to the functions upon execution</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.select(NumpyDotNet.ndarray[],NumpyDotNet.ndarray[],System.Int32)">
            <summary>
            Return an array drawn from elements in choicelist, depending on conditions.
            </summary>
            <param name="condlist">The list of conditions which determine from which array in `choicelist` the output elements are taken</param>
            <param name="choicelist">The list of arrays from which the output elements are taken. It has to be of the same length as `condlist`.</param>
            <param name="_default">The element inserted in `output` when all conditions evaluate to False.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.copy(NumpyDotNet.ndarray,NumpyLib.NPY_ORDER)">
            <summary>
            Return an array copy of the given object.
            </summary>
            <param name="a">Input data.</param>
            <param name="order">{'C', 'F', 'A', 'K'}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.gradient(System.Object,System.Collections.Generic.IList{System.Object},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Return the gradient of an N-dimensional array.
            </summary>
            <param name="f">An N-dimensional array containing samples of a scalar function.</param>
            <param name="varargs">Spacing between f values. </param>
            <param name="axes">Gradient is calculated only along the given axis or axes</param>
            <param name="edge_order">{1, 2}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.gradient(System.Object,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Return the gradient of an N-dimensional array.
            </summary>
            <param name="f">An N-dimensional array containing samples of a scalar function.</param>
            <param name="varargs">Spacing between f values. </param>
            <param name="axes">Gradient is calculated only along the given axis or axes</param>
            <param name="edge_order">{1, 2}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.diff(System.Object,System.Int32,System.Int32)">
            <summary>
            Calculate the n - th discrete difference along the given axis.
            </summary>
            <param name="a">Input array</param>
            <param name="n">The number of times values are differenced.If zero, the input is returned as-is.</param>
            <param name="axis">The axis along which the difference is taken, default is the last axis.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.interp(System.Object,System.Object,System.Object,System.Object,System.Object,System.Nullable{System.Double})">
            <summary>
            One-dimensional linear interpolation.
            </summary>
            <param name="x">The x-coordinates of the interpolated values.</param>
            <param name="xp">1-D sequence of floats, the x-coordinates of the data points</param>
            <param name="fp">1-D sequence of float or complex, the y-coordinates of the data points</param>
            <param name="left"> optional float or complex corresponding to fp value to return for "x LT xp[0]"</param>
            <param name="right">optional float or complex corresponding to fp value to return for "x GT xp[-1]"</param>
            <param name="period">A period for the x-coordinates. This parameter allows the proper interpolation of angular x-coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.angle(System.Object,System.Boolean)">
            <summary>
            Return the angle of the complex argument.
            </summary>
            <param name="z"> A complex number or sequence of complex numbers.</param>
            <param name="deg">Return angle in degrees if True, radians if False (default).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.unwrap(System.Object,System.Double,System.Int32)">
            <summary>
            Unwrap by changing deltas between values to 2*pi complement.
            </summary>
            <param name="p">Input array.</param>
            <param name="discont">Maximum discontinuity between values, default is "pi"</param>
            <param name="axis">Axis along which unwrap will operate, default is the last axis.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sort_complex(System.Object)">
            <summary>
            Sort a complex array using the real part first, then the imaginary part.
            </summary>
            <param name="oa">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.trim_zeros(NumpyDotNet.ndarray,System.String)">
            <summary>
            Trim the leading and/or trailing zeros from a 1-D array or sequence.
            </summary>
            <param name="filt">1-D array or sequence Input array.</param>
            <param name="trim">A string with 'f' representing trim from front and 'b' to trim from back.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.extract(NumpyDotNet.ndarray,NumpyDotNet.ndarray)">
            <summary>
            Return the elements of an array that satisfy some condition.
            </summary>
            <param name="condition">An array whose nonzero or True entries indicate the elements of 'arr' to extract.</param>
            <param name="arr">Input array of the same size as 'condition'</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.place(System.Object,System.Object,System.Object)">
            <summary>
            Change elements of an array based on conditional and input values.
            </summary>
            <param name="arr">Array to put data into.</param>
            <param name="mask"> Boolean mask array. Must have the same size as 'arr'.</param>
            <param name="vals">Values to put into 'arr'. Only the first N elements are used, where N is the number of True values in 'mask'</param>
        </member>
        <member name="M:NumpyDotNet.np.cov(System.Object,System.Object,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Object,System.Object)">
            <summary>
            Estimate a covariance matrix, given data and weights.
            </summary>
            <param name="m">A 1-D or 2-D array containing multiple variables and observations.</param>
            <param name="y">An additional set of variables and observations.</param>
            <param name="rowvar">If `rowvar` is True (default), then each row represents a variable, with observations in the columns.</param>
            <param name="bias">Default normalization (False) is by '(N - 1)', where 'N' is the number of observations given(unbiased estimate)</param>
            <param name="ddof">If not null the default value implied by 'bias' is overridden.</param>
            <param name="fweights">1-D array of integer frequency weights</param>
            <param name="aweights">1-D array of observation vector weights.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.corrcoef(System.Object,System.Object,System.Boolean)">
            <summary>
            Return Pearson product-moment correlation coefficients.
            </summary>
            <param name="x">A 1-D or 2-D array containing multiple variables and observations.</param>
            <param name="y">An additional set of variables and observations.</param>
            <param name="rowvar">If `rowvar` is True (default), then each row represents a variable, with observations in the columns.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.blackman(System.Int32)">
            <summary>
            Return the Blackman window.
            </summary>
            <param name="M">Number of points in the output window. If zero or less, an empty array is returned.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.bartlett(System.Int32)">
            <summary>
            Return the Bartlett window.
            </summary>
            <param name="M">Number of points in the output window. If zero or less, an empty array is returned.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.hanning(System.Int32)">
            <summary>
            Return the Hanning window.
            </summary>
            <param name="M">Number of points in the output window. If zero or less, an empty array is returned.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.hamming(System.Int32)">
            <summary>
            Return the Hamming window.
            </summary>
            <param name="M">Number of points in the output window. If zero or less, an empty array is returned.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.i0(System.Object)">
            <summary>
            Modified Bessel function of the first kind, order 0.
            </summary>
            <param name="x">array_like, dtype float or complex Argument of the Bessel function.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.kaiser(System.Int32,System.Double)">
            <summary>
            Return the Kaiser window.
            </summary>
            <param name="M">Number of points in the output window. If zero or less, an empty array is returned.</param>
            <param name="beta">Shape parameter for window.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sinc(NumpyDotNet.ndarray)">
            <summary>
            Return the sinc function.
            </summary>
            <param name="x">Array (possibly multi-dimensional) of values for which to to calculate 'sinc(x)'.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.msort(NumpyDotNet.ndarray)">
            <summary>
            Return a copy of an array sorted along the first axis.
            </summary>
            <param name="a">Array to be sorted.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.median(NumpyDotNet.ndarray,System.Int32[],System.Boolean)">
            <summary>
            Compute the median along the specified axis.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <param name="axis">Axis or axes along which the medians are computed.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.median(NumpyDotNet.ndarray,System.Int32,System.Boolean)">
            <summary>
            Compute the median along the specified axis.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <param name="axis">Axis or axes along which the medians are computed.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.percentile(System.Object,System.Object,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Compute the qth percentile of the data along the specified axis.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <param name="q">Percentile or sequence of percentiles to compute, which must be between 0 and 100 inclusive.</param>
            <param name="axis">Axis or axes along which the percentiles are computed.</param>
            <param name="interpolation">{'linear', 'lower', 'higher', 'midpoint', 'nearest'}</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.quantile(System.Object,System.Object,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Compute the q-th quantile of the data along the specified axis.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <param name="q">Quantile or sequence of quantiles to compute, which must be between 0 and 1 inclusive.</param>
            <param name="axis">Axis or axes along which the quantiles are computed.</param>
            <param name="interpolation">{'linear', 'lower', 'higher', 'midpoint', 'nearest'}</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.trapz(System.Object,System.Object,System.Double,System.Int32)">
            <summary>
            Integrate along the given axis using the composite trapezoidal rule.
            </summary>
            <param name="y">Input array to integrate.</param>
            <param name="x">The sample points corresponding to the 'y' values</param>
            <param name="dx">The spacing between sample points when 'x' is null</param>
            <param name="axis">The axis along which to integrate.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.meshgrid(NumpyDotNet.ndarray[],System.String,System.Boolean,System.Boolean)">
            <summary>
            Return coordinate matrices from coordinate vectors.
            </summary>
            <param name="xi">1-D arrays representing the coordinates of a grid.</param>
            <param name="indexing">Cartesian ('xy', default) or matrix ('ij') indexing of output.</param>
            <param name="sparse">If True a sparse grid is returned in order to conserve memory.</param>
            <param name="copy">If False, a view into the original arrays are returned in order to conserve memory</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.delete(NumpyDotNet.ndarray,NumpyDotNet.Slice,System.Int32)">
            <summary>
            Return a new array with sub-arrays along an axis deleted. For a one dimensional array, this returns those entries not returned by 'arr[obj]'.
            </summary>
            <param name="arr">Input array.</param>
            <param name="slice">slice, int or array of ints. Indicate which sub-arrays to remove.</param>
            <param name="axis">The axis along which to delete the subarray defined by 'slice'</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.delete(NumpyDotNet.ndarray,System.Int32,System.Int32)">
            <summary>
            Return a new array with sub-arrays along an axis deleted. For a one dimensional array, this returns those entries not returned by 'arr[obj]'
            </summary>
            <param name="arr">Input array.</param>
            <param name="index">Indicate which sub-arrays to remove.</param>
            <param name="axis">The axis along which to delete the subarray defined by 'index'</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.insert(NumpyDotNet.ndarray,System.Object,System.Object,System.Nullable{System.Int32})">
            <summary>
            Insert values along the given axis before the given indices.
            </summary>
            <param name="arr">Input array.</param>
            <param name="obj"> Object that defines the index or indices before which 'values' is inserted.</param>
            <param name="_invalues">Values to insert into 'arr'.</param>
            <param name="axis">Axis along which to insert 'values'.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.append(NumpyDotNet.ndarray,System.Object,System.Nullable{System.Int32})">
            <summary>
            Append values to the end of an array.
            </summary>
            <param name="arr">Values are appended to a copy of this array.</param>
            <param name="values">These values are appended to a copy of 'arr'.</param>
            <param name="axis">The axis along which 'values' are appended.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram``1(System.Object,``0[],System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the histogram of a set of data.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the number of equal-width bins in the given range (10, by default).</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram(System.Object,NumpyDotNet.ndarray,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the histogram of a set of data.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the number of equal-width bins in the given range (10, by default).</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram(System.Object,System.Nullable{System.Int32},System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the histogram of a set of data.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the number of equal-width bins in the given range (10, by default).</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram(System.Object,NumpyDotNet.Histogram_BinSelector,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the histogram of a set of data.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the number of equal-width bins in the given range (10, by default).</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogramdd``1(System.Object,``0[],System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the multidimensional histogram of some data.
            </summary>
            <param name="sample">The data to be histogrammed.</param>
            <param name="bins"> number of bins for each dimension</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogramdd(System.Object,NumpyDotNet.ndarray,System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the multidimensional histogram of some data.
            </summary>
            <param name="sample">The data to be histogrammed.</param>
            <param name="bins"> number of bins for each dimension</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogramdd(System.Object,System.Nullable{System.Int32},System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the multidimensional histogram of some data.
            </summary>
            <param name="sample">The data to be histogrammed.</param>
            <param name="bins"> number of bins for each dimension</param>
            <param name="range">The lower and upper range of the bins</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <param name="density">if true, calculate the probability density function</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram2d(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.Int32[]},System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the bi-dimensional histogram of two data samples.
            </summary>
            <param name="x">An array containing the x coordinates of the points to be histogrammed.</param>
            <param name="y">An array containing the y coordinates of the points to be histogrammed.</param>
            <param name="bins">the number of bins for the two dimensions </param>
            <param name="range">The leftmost and rightmost edges of the bins along each dimension</param>
            <param name="weights">An array of values w_i weighing each sample (x_i, y_i).</param>
            <param name="density">If True, returns the probability density function at the bin, bin_count / sample_count / bin_area.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram2d(System.Object,System.Object,System.Nullable{System.Int32},System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the bi-dimensional histogram of two data samples.
            </summary>
            <param name="x">An array containing the x coordinates of the points to be histogrammed.</param>
            <param name="y">An array containing the y coordinates of the points to be histogrammed.</param>
            <param name="bins">the number of bins for the two dimensions </param>
            <param name="range">The leftmost and rightmost edges of the bins along each dimension</param>
            <param name="weights">An array of values w_i weighing each sample (x_i, y_i).</param>
            <param name="density">If True, returns the probability density function at the bin, bin_count / sample_count / bin_area.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram2d(System.Object,System.Object,System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray},System.Tuple{System.Int32,System.Int32}[],System.Object,System.Nullable{System.Boolean})">
            <summary>
            Compute the bi-dimensional histogram of two data samples.
            </summary>
            <param name="x">An array containing the x coordinates of the points to be histogrammed.</param>
            <param name="y">An array containing the y coordinates of the points to be histogrammed.</param>
            <param name="bins">the number of bins for the two dimensions </param>
            <param name="range">The leftmost and rightmost edges of the bins along each dimension</param>
            <param name="weights">An array of values w_i weighing each sample (x_i, y_i).</param>
            <param name="density">If True, returns the probability density function at the bin, bin_count / sample_count / bin_area.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram_bin_edges``1(System.Object,``0[],System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object)">
            <summary>
            Function to calculate only the edges of the bins used by the histogram function.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the bin edges, including the rightmost edge, allowing for non-uniform bin widths.</param>
            <param name="range">The lower and upper range of the bins.</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram_bin_edges(System.Object,NumpyDotNet.ndarray,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object)">
            <summary>
            Function to calculate only the edges of the bins used by the histogram function.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the bin edges, including the rightmost edge, allowing for non-uniform bin widths.</param>
            <param name="range">The lower and upper range of the bins.</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram_bin_edges(System.Object,System.Nullable{System.Int32},System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object)">
            <summary>
            Function to calculate only the edges of the bins used by the histogram function.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">the number of equal-width bins in the given range (10, by default).</param>
            <param name="range">The lower and upper range of the bins.</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.histogram_bin_edges(System.Object,NumpyDotNet.Histogram_BinSelector,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Object)">
            <summary>
            Function to calculate only the edges of the bins used by the histogram function.
            </summary>
            <param name="a">Input data. The histogram is computed over the flattened array.</param>
            <param name="bins">Histogram_BinSelector enumeration : choice of which bin selector to use</param>
            <param name="range">The lower and upper range of the bins.</param>
            <param name="weights">An array of weights, of the same shape as a.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.bincount(System.Object,System.Object,System.Nullable{System.Int64})">
            <summary>
            Count number of occurrences of each value in array of non-negative ints.
            </summary>
            <param name="x">Input array.</param>
            <param name="weights">Weights, array of the same shape as x.</param>
            <param name="minlength">A minimum number of bins for the output array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.digitize(System.Object,System.Object,System.Boolean)">
            <summary>
            Return the indices of the bins to which each value in input array belongs.
            </summary>
            <param name="x">Input array to be binned.</param>
            <param name="bins">Array of bins. It has to be 1-dimensional and monotonic.</param>
            <param name="right">indicating whether the intervals include the right or the left bin edge.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.mgrid(NumpyDotNet.Slice[])">
            <summary>
            nd_grid instance which returns a dense multi-dimensional “meshgrid”.
            </summary>
            <param name="key"></param>
            <returns>mesh-grid ndarrays all of the same dimensions</returns>
        </member>
        <member name="M:NumpyDotNet.np.ogrid(NumpyDotNet.Slice[])">
            <summary>
            nd_grid instance which returns an open multi-dimensional “meshgrid”.
            </summary>
            <param name="key"></param>
            <returns>ndarrays with only one dimension not equal to 1</returns>
        </member>
        <member name="M:NumpyDotNet.np.fill_diagonal(NumpyDotNet.ndarray,System.Object,System.Boolean)">
            <summary>
            Fill the main diagonal of the given array of any dimensionality.
            </summary>
            <param name="a">array, at least 2-D, whose diagonal is to be filled, it gets modified in-place.</param>
            <param name="val">Value(s) to write on the diagonal. </param>
            <param name="wrap">the diagonal “wrapped” after N columns.</param>
        </member>
        <member name="M:NumpyDotNet.np.diag_indices(System.Int32,System.Int32)">
            <summary>
            Return the indices to access the main diagonal of an array.
            </summary>
            <param name="n">The size, along each dimension, of the arrays for which the returned indices can be used.</param>
            <param name="ndim">The number of dimensions.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.diag_indices_from(NumpyDotNet.ndarray)">
            <summary>
            Return the indices to access the main diagonal of an n - dimensional array.
            </summary>
            <param name="arr">array, at least 2 - D</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sin(System.Object,System.Object)">
            <summary>
            Trigonometric sine, element-wise.
            </summary>
            <param name="x">Angle, in radians (2pi rad equals 360 degrees).</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cos(System.Object,System.Object)">
            <summary>
            Cosine element-wise.
            </summary>
            <param name="x">Input array in radians.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tan(System.Object,System.Object)">
            <summary>
            Compute tangent element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arcsin(System.Object,System.Object)">
            <summary>
            Inverse sine, element-wise.
            </summary>
            <param name="x">y-coordinate on the unit circle.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arccos(System.Object,System.Object)">
            <summary>
            Trigonometric inverse cosine, element-wise.
            </summary>
            <param name="x">x-coordinate on the unit circle.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arctan(System.Object,System.Object)">
            <summary>
            Trigonometric inverse tangent, element-wise.
            </summary>
            <param name="x"></param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.hypot(System.Object,System.Object,System.Object)">
            <summary>
            Given the “legs” of a right triangle, return its hypotenuse.
            </summary>
            <param name="x1">Leg of the triangle(s).</param>
            <param name="x2">Leg of the triangle(s).</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arctan2(System.Object,System.Object,System.Object)">
            <summary>
            Element-wise arc tangent of x1/x2 choosing the quadrant correctly.
            </summary>
            <param name="x1">y-coordinates.</param>
            <param name="x2">x-coordinates.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.rad2deg(System.Object,System.Object)">
            <summary>
            Convert angles from radians to degrees.
            </summary>
            <param name="x">Angle in radians.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.degrees(System.Object,System.Object)">
            <summary>
            Convert angles from radians to degrees.
            </summary>
            <param name="x">Angle in radians.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.deg2rad(System.Object,System.Object)">
            <summary>
            Convert angles from degrees to radians.
            </summary>
            <param name="x">Input array in degrees.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.radians(System.Object,System.Object)">
            <summary>
            Convert angles from degrees to radians.
            </summary>
            <param name="x">Input array in degrees.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sinh(System.Object,System.Object)">
            <summary>
            Hyperbolic sine, element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cosh(System.Object,System.Object)">
            <summary>
            Hyperbolic cosine, element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tanh(System.Object,System.Object)">
            <summary>
            Compute hyperbolic tangent element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arcsinh(System.Object,System.Object)">
            <summary>
            Inverse hyperbolic sine element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arccosh(System.Object,System.Object)">
            <summary>
            Inverse hyperbolic cosine, element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arctanh(System.Object,System.Object)">
            <summary>
            Inverse hyperbolic tangent element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.rint(System.Object,System.Object)">
            <summary>
            Round elements of the array to the nearest integer.
            </summary>
            <param name="x">Input array.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fix(System.Object)">
            <summary>
            Round to nearest integer towards zero.
            </summary>
            <param name="x">An array of floats to be rounded</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ceil(System.Object,System.Object)">
            <summary>
            Return the ceiling of the input, element-wise.
            </summary>
            <param name="x">Input data.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.trunc(System.Object)">
            <summary>
            Return the truncated value of the input, element-wise.
            </summary>
            <param name="x">Input data.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.exp(System.Object,System.Object)">
            <summary>
            Calculate the exponential of all elements in the input array.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.expm1(System.Object,System.Object)">
            <summary>
            Calculate exp(x) - 1 for all elements in the array.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.exp2(System.Object,System.Object)">
            <summary>
            Calculate 2**p for all p in the input array.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.log(System.Object,System.Object)">
            <summary>
            Natural logarithm, element-wise.
            </summary>
            <param name="x">Input value.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.log10(System.Object,System.Object)">
            <summary>
            Return the base 10 logarithm of the input array, element-wise.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.log2(System.Object,System.Object)">
            <summary>
            Base-2 logarithm of x.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logn(System.Object,System.Int32,System.Object)">
            <summary>
            Take log base n of x.
            </summary>
            <param name="x">The value(s) whose log base n is (are) required.</param>
            <param name="n">The integer base(s) in which the log is taken.</param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.log1p(System.Object,System.Object)">
            <summary>
            Return the natural logarithm of one plus the input array, element-wise.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logaddexp(System.Object,System.Object,System.Object)">
            <summary>
            Logarithm of the sum of exponentiations of the inputs.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logaddexp2(System.Object,System.Object,System.Object)">
            <summary>
            Logarithm of the sum of exponentiations of the inputs in base-2.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logaddexpn(System.Object,System.Object,System.Int32,System.Object)">
            <summary>
            Logarithm of the sum of exponentiations of the inputs in base-n.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Input values.</param>
            <param name="n">The integer base(s) in which the log is taken.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.signbit(System.Object,System.Object)">
            <summary>
            Returns element-wise True where signbit is set (less than zero).
            </summary>
            <param name="x">The input value(s).</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.copysign(System.Object,System.Object,System.Object)">
            <summary>
            Change the sign of x1 to that of x2, element-wise.
            </summary>
            <param name="x1">Values to change the sign of.</param>
            <param name="x2">The sign of x2 is copied to x1</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.frexp(System.Object,System.Object)">
            <summary>
            Decompose the elements of x into mantissa and twos exponent.
            </summary>
            <param name="x">Array of numbers to be decomposed.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ldexp(System.Object,System.Object,System.Object)">
            <summary>
            Returns x1 * 2**x2, element-wise.
            </summary>
            <param name="x1">Array of multipliers.</param>
            <param name="x2">Array of twos exponents.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nextafter(System.Object,System.Object,System.Object)">
            <summary>
            Return the next floating-point value after x1 towards x2, element-wise.
            </summary>
            <param name="x1">Values to find the next representable value of.</param>
            <param name="x2">The direction where to look for the next representable value of x1.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.lcm(System.Object,System.Object,System.Object)">
            <summary>
            Returns the lowest common multiple of |x1| and |x2|
            </summary>
            <param name="x1">Arrays of values</param>
            <param name="x2">Arrays of values</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.gcd(System.Object,System.Object,System.Object)">
            <summary>
            Returns the greatest common divisor of |x1| and |x2|
            </summary>
            <param name="x1">Arrays of values.</param>
            <param name="x2">Arrays of values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.add(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Add arguments element-wise.
            </summary>
            <param name="x1">The arrays to be added.</param>
            <param name="x2">The arrays to be added.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.reciprocal(System.Object)">
            <summary>
            Return the reciprocal of the argument, element-wise.
            </summary>
            <param name="a">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.positive(System.Object)">
            <summary>
            Numerical positive, element-wise.
            </summary>
            <param name="x">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.negative(System.Object,NumpyDotNet.ndarray)">
            <summary>
            Numerical negative, element-wise.
            </summary>
            <param name="x">Input array.</param>
            <param name="out">A location into which the result is stored.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.multiply(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Multiply arguments element-wise.
            </summary>
            <param name="x1">Input arrays to be multiplied.</param>
            <param name="x2">Input arrays to be multiplied.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.divide(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Returns a true division of the inputs, element-wise.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor array.</param>
            <param name="out">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.power(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            First array elements raised to powers from second array, element-wise.
            </summary>
            <param name="x1">The bases.</param>
            <param name="x2">The exponents.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.subtract(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Subtract arguments, element-wise.
            </summary>
            <param name="x1">The arrays to be subtracted from each other.</param>
            <param name="x2">The arrays to be subtracted from each other.</param>
            <param name="out">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.true_divide(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Returns a true division of the inputs, element-wise.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor array.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.floor_divide(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the largest integer smaller or equal to the division of the inputs. 
            </summary>
            <param name="x1">Numerator.</param>
            <param name="x2">Denominator. </param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.float_power(System.Object,System.Object,System.Object)">
            <summary>
            First array elements raised to powers from second array, element-wise.
            </summary>
            <param name="x1">The bases.</param>
            <param name="x2">The exponents.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.mod(System.Object,System.Object)">
            <summary>
            Return element-wise remainder of division.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.mod(System.Object,System.Int32)">
            <summary>
            Return element-wise remainder of division.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.remainder(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return element-wise remainder of division.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor array. </param>
            <param name="out">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fmod(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the element-wise remainder of division.
            </summary>
            <param name="x1">Dividend.</param>
            <param name="x2">Divisor</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.divmod(System.Object,System.Object,NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return element-wise quotient and remainder simultaneously.
            </summary>
            <param name="x1">Dividend array.</param>
            <param name="x2">Divisor array.</param>
            <param name="out1">A location into which the result is stored.</param>
            <param name="out2">A location into which the result is stored.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.modf(System.Object,NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the fractional and integral parts of an array, element-wise.
            </summary>
            <param name="x1">Input array.</param>
            <param name="out1">A location into which the result is stored. </param>
            <param name="out2">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sign(System.Object,System.Object)">
            <summary>
            Returns an element-wise indication of the sign of a number.
            </summary>
            <param name="x">Input values.</param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.convolve(System.Object,System.Object,NumpyLib.NPY_CONVOLE_MODE)">
            <summary>
            Returns the discrete, linear convolution of two one-dimensional sequences.
            </summary>
            <param name="a">First one-dimensional input array.</param>
            <param name="v">Second one-dimensional input array.</param>
            <param name="mode">{‘full’, ‘valid’, ‘same’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.conj(System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the complex conjugate, element-wise.
            </summary>
            <param name="a">Input value.</param>
            <param name="out">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.conjugate(System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the complex conjugate, element-wise.
            </summary>
            <param name="x1">Input value.</param>
            <param name="out">A location into which the result is stored. </param>
            <param name="where">This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanmin(System.Object,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Return minimum of an array or minimum along an axis, ignoring any NaNs. 
            </summary>
            <param name="a">Array containing numbers whose minimum is desired</param>
            <param name="axis">Axis or axes along which the minimum is computed.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanmax(System.Object,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Return the maximum of an array or maximum along an axis, ignoring any NaNs.
            </summary>
            <param name="a">Array containing numbers whose maximum is desired.</param>
            <param name="axis">Axis or axes along which the maximum is computed.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanargmin(System.Object,System.Nullable{System.Int32})">
            <summary>
            Return the indices of the minimum values in the specified axis ignoring NaNs.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis along which to operate.By default flattened input is used.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanargmax(System.Object,System.Nullable{System.Int32})">
            <summary>
            Return the indices of the maximum values in the specified axis ignoring NaNs.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis along which to operate.By default flattened input is used.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nansum(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the sum of array elements over a given axis treating Not a Numbers(NaNs) as zero.
            </summary>
            <param name="a">Array containing numbers whose sum is desired.</param>
            <param name="axis">Axis or axes along which the sum is computed.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="out">Alternate output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanprod(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the product of array elements over a given axis treating Not a Numbers(NaNs) as ones.
            </summary>
            <param name="a">Array containing numbers whose product is desired.</param>
            <param name="axis">Axis or axes along which the product is computed.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="out">Alternate output array in which to place the result.</param>
            <param name="keepdims">If True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nancumsum(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative sum of array elements over a given axis treating Not a Numbers(NaNs) as zero.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">Axis along which the cumulative sum is computed.</param>
            <param name="dtype">Type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nancumprod(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative product of array elements over a given axis treating Not a Numbers(NaNs) as one.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">Axis along which the cumulative product is computed.</param>
            <param name="dtype">Type of the returned array, as well as of the accumulator in which the elements are multiplied.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanmean(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Boolean)">
            <summary>
            Compute the arithmetic mean along the specified axis, ignoring NaNs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired.</param>
            <param name="axis">Axis or axes along which the means are computed.</param>
            <param name="dtype">Type to use in computing the mean.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanmedian(System.Object,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Compute the median along the specified axis, while ignoring NaNs.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">Axis or axes along which the medians are computed.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanpercentile(System.Object,System.Object,System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean)">
            <summary>
            Compute the qth percentile of the data along the specified axis, while ignoring nan values.
            </summary>
            <param name="a">Input array</param>
            <param name="q">Percentile or sequence of percentiles to compute, which must be between 0 and 100 inclusive.</param>
            <param name="axis">Axis or axes along which the percentiles are computed.</param>
            <param name="overwrite_input">If True, then allow the input array `a` to be modified by intermediate calculations, to save memory.</param>
            <param name="interpolation">{'linear', 'lower', 'higher', 'midpoint', 'nearest'}</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanquantile(System.Object,System.Object,System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean)">
            <summary>
            Compute the qth quantile of the data along the specified axis, while ignoring nan values.
            </summary>
            <param name="a">Input array</param>
            <param name="q">Quantile or sequence of quantiles to compute, which must be between 0 and 1 inclusive.</param>
            <param name="axis">Axis or axes along which the quantiles are computed.</param>
            <param name="overwrite_input">If True, then allow the input array `a` to be modified by intermediate calculations, to save memory. </param>
            <param name="interpolation">{'linear', 'lower', 'higher', 'midpoint', 'nearest'}</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanvar(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Int32,System.Boolean)">
            <summary>
            Compute the variance along the specified axis, while ignoring NaNs.
            </summary>
            <param name="a">Array containing numbers whose variance is desired.</param>
            <param name="axis">Axis or axes along which the variance is computed.</param>
            <param name="dtype">Type to use in computing the variance.</param>
            <param name="ddof">"Delta Degrees of Freedom": the divisor used in the calculation</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nanstd(System.Object,System.Nullable{System.Int32},NumpyDotNet.dtype,System.Int32,System.Boolean)">
            <summary>
            Compute the standard deviation along the specified axis, while ignoring NaNs
            </summary>
            <param name="a">Calculate the standard deviation of the non-NaN values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed.</param>
            <param name="dtype">Type to use in computing the standard deviation.</param>
            <param name="ddof">Means Delta Degrees of Freedom.  The divisor used in calculations</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="F:NumpyDotNet.np.Bool">
            <summary>
            Data Type descriptor for bool ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Int8">
            <summary>
            Data Type descriptor for sbyte ndarray
            </summary> 
        </member>
        <member name="F:NumpyDotNet.np.UInt8">
            <summary>
            Data Type descriptor for byte ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Int16">
            <summary>
            Data Type descriptor for Int16 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.UInt16">
            <summary>
            Data Type descriptor for UInt16 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Int32">
            <summary>
            Data Type descriptor for Int32 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.UInt32">
            <summary>
            Data Type descriptor for UInt32 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Int64">
            <summary>
            Data Type descriptor for Int64 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.UInt64">
            <summary>
            Data Type descriptor for UInt64 ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Float32">
            <summary>
             Data Type descriptor for System.Single/Float ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Float64">
            <summary>
             Data Type descriptor for System.Double ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Decimal">
            <summary>
             Data Type descriptor for Decimal ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Complex">
            <summary>
             Data Type descriptor for System.Numerics.Complex ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.BigInt">
            <summary>
             Data Type descriptor for System.Numerics.BigInteger ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Object">
            <summary>
             Data Type descriptor for System.Object ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.Strings">
            <summary>
             Data Type descriptor for System.String ndarray
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.intp">
            <summary>
             Data Type descriptor for INTP ndarray.  Used for indexing.
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.None">
            <summary>
            special case
            </summary>
        </member>
        <member name="F:NumpyDotNet.np.newaxis">
            <summary>
            special case
            </summary>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Boolean[])">
            <summary>
            Create ndarray from .net bool array
            </summary>
            <param name="arr">input bool array</param>
            <returns>ndarray of type NPY_TYPES.NPY_BOOL</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Byte[])">
            <summary>
            Create ndarray from .net byte array
            </summary>
            <param name="arr">input byte array</param>
            <returns>ndarray of type NPY_TYPES.NPY_UBYTE</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.SByte[])">
            <summary>
            Create ndarray from .net sbyte array
            </summary>
            <param name="arr">input sbyte array</param>
            <returns>ndarray of type NPY_TYPES.NPY_BYTE</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Int16[])">
            <summary>
            Create ndarray from .net Int16 array
            </summary>
            <param name="arr">input Int16 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_INT16</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.UInt16[])">
            <summary>
            Create ndarray from .net UInt16 array
            </summary>
            <param name="arr">input UInt16 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_UINT16</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Int32[])">
            <summary>
            Create ndarray from .net Int32 array
            </summary>
            <param name="arr">input Int32 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_INT32</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.UInt32[])">
            <summary>
            Create ndarray from .net UInt32 array
            </summary>
            <param name="arr">input UInt32 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_UINT32</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Int64[])">
            <summary>
            Create ndarray from .net Int64 array
            </summary>
            <param name="arr">input Int64 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_INT64</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.UInt64[])">
            <summary>
            Create ndarray from .net UInt64 array
            </summary>
            <param name="arr">input UInt64 array</param>
            <returns>ndarray of type NPY_TYPES.NPY_UINT64</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Single[])">
            <summary>
            Create ndarray from .net float array
            </summary>
            <param name="arr">input float array</param>
            <returns>ndarray of type NPY_TYPES.NPY_FLOAT</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Double[])">
            <summary>
            Create ndarray from .net double array
            </summary>
            <param name="arr">input double array</param>
            <returns>ndarray of type NPY_TYPES.NPY_DOUBLE</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Decimal[])">
            <summary>
            Create ndarray from .net decimal array
            </summary>
            <param name="arr">input decimal array</param>
            <returns>ndarray of type NPY_TYPES.NPY_DECIMAL</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Numerics.Complex[])">
            <summary>
            Create ndarray from .net Complex array
            </summary>
            <param name="arr">input Complex array</param>
            <returns>ndarray of type NPY_TYPES.NPY_COMPLEX</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Numerics.BigInteger[])">
            <summary>
            Create ndarray from .net BigInteger array
            </summary>
            <param name="arr">input BigInteger array</param>
            <returns>ndarray of type NPY_TYPES.NPY_BIGINT</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Object[])">
            <summary>
            Create ndarray from .net Object array
            </summary>
            <param name="arr">input Object array</param>
            <returns>ndarray of type NPY_TYPES.NPY_OBJECT</returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.String[])">
            <summary>
            Create ndarray from .net String array
            </summary>
            <param name="arr">input String array</param>
            <returns>ndarray of type NPY_TYPES.NPY_STRING</returns>
        </member>
        <member name="M:NumpyDotNet.np.array``1(``0[],NumpyDotNet.dtype,System.Boolean,NumpyLib.NPY_ORDER,System.Boolean,System.Int32)">
            <summary>
            Create ndarray from specified buffer, converting to the specified data type if necessary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">buffer to create ndarray from</param>
            <param name="dtype">data type of created ndarray</param>
            <param name="copy">true to copy arr buffer, false to share the arr buffer</param>
            <param name="order">allows for specifying the ordering of bytes (fortran/C/K),</param>
            <param name="subok">(optional) if true, subclasses will be passed thru</param>
            <param name="ndmin">(optional) specifies number of dimensions resulting array should have</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array(NumpyLib.VoidPtr,NumpyDotNet.dtype,System.Boolean,NumpyLib.NPY_ORDER,System.Boolean,System.Int32)">
            <summary>
            Create ndarray from specified buffer, converting to the specified data type if necessary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">buffer to create ndarray from</param>
            <param name="dtype">data type of created ndarray</param>
            <param name="copy">true to copy arr buffer, false to share the arr buffer</param>
            <param name="order">allows for specifying the ordering of bytes (fortran/C/K),</param>
            <param name="subok">(optional) if true, subclasses will be passed thru</param>
            <param name="ndmin">(optional) specifies number of dimensions resulting array should have</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array(NumpyLib.VoidPtr,System.Int32)">
            <summary>
            create array from passed data but specifying number of elements
            </summary>
            <param name="arr">array of data to create array from</param>
            <param name="numElements">number of elements from arr to create ndarray from</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array(System.Object,NumpyDotNet.dtype,System.Boolean,NumpyLib.NPY_ORDER,System.Boolean,System.Int32)">
            <summary>
            Create ndarray from specified buffer, converting to the specified data type if necessary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">buffer to create ndarray from</param>
            <param name="dtype">data type of created ndarray</param>
            <param name="copy">true to copy arr buffer, false to share the arr buffer</param>
            <param name="order">allows for specifying the ordering of bytes (fortran/C/K),</param>
            <param name="subok">(optional) if true, subclasses will be passed thru</param>
            <param name="ndmin">(optional) specifies number of dimensions resulting array should have</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ndarray(NumpyDotNet.shape,NumpyDotNet.dtype)">
            <summary>
            creates zero filled array with the specified shape and data type
            </summary>
            <param name="shape">shape of array to create</param>
            <param name="dtype">data type of array to create</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.arange(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced values within a given interval.
            </summary>
            <param name="start">Start of interval. The interval includes this value. The default start value is 0.</param>
            <param name="stop">End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out.</param>
            <param name="step">Spacing between values. For any output out, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified, start must also be given.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <returns>Array of evenly spaced values</returns>
            <notes>For floating point arguments, the length of the result is ceil((stop - start)/step). Because of floating point overflow, this rule may result in the last element of out being greater than stop.</notes>
            <notes>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use linspace for these cases.</notes>
        </member>
        <member name="M:NumpyDotNet.np.arange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double},NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced values within a given interval.
            </summary>
            <param name="start">Start of interval. The interval includes this value. The default start value is 0.</param>
            <param name="stop">End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out.</param>
            <param name="step">Spacing between values. For any output out, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified, start must also be given.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <returns>Array of evenly spaced values</returns>
            <notes>For floating point arguments, the length of the result is ceil((stop - start)/step). Because of floating point overflow, this rule may result in the last element of out being greater than stop.</notes>
            <notes>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use linspace for these cases.</notes>
        </member>
        <member name="M:NumpyDotNet.np.arange(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced values within a given interval.
            </summary>
            <param name="start">Start of interval. The interval includes this value. The default start value is 0.</param>
            <param name="stop">End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out.</param>
            <param name="step">Spacing between values. For any output out, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified, start must also be given.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <returns>Array of evenly spaced values</returns>
            <notes>For floating point arguments, the length of the result is ceil((stop - start)/step). Because of floating point overflow, this rule may result in the last element of out being greater than stop.</notes>
            <notes>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use linspace for these cases.</notes>
        </member>
        <member name="M:NumpyDotNet.np.arange(System.Numerics.Complex,System.Nullable{System.Numerics.Complex},System.Nullable{System.Numerics.Complex},NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced values within a given interval.
            </summary>
            <param name="start">Start of interval. The interval includes this value. The default start value is 0.</param>
            <param name="stop">End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out.</param>
            <param name="step">Spacing between values. For any output out, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified, start must also be given.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <returns>Array of evenly spaced values</returns>
            <notes>For floating point arguments, the length of the result is ceil((stop - start)/step). Because of floating point overflow, this rule may result in the last element of out being greater than stop.</notes>
            <notes>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use linspace for these cases.</notes>
        </member>
        <member name="M:NumpyDotNet.np.arange(System.Numerics.BigInteger,System.Nullable{System.Numerics.BigInteger},System.Nullable{System.Numerics.BigInteger},NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced values within a given interval.
            </summary>
            <param name="start">Start of interval. The interval includes this value. The default start value is 0.</param>
            <param name="stop">End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out.</param>
            <param name="step">Spacing between values. For any output out, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified, start must also be given.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <returns>Array of evenly spaced values</returns>
            <notes>For floating point arguments, the length of the result is ceil((stop - start)/step). Because of floating point overflow, this rule may result in the last element of out being greater than stop.</notes>
            <notes>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use linspace for these cases.</notes>
        </member>
        <member name="M:NumpyDotNet.np.linspace(System.Int64,System.Int64,System.Double@,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced numbers over a specified interval.
            </summary>
            <param name="start">The starting value of the sequence</param>
            <param name="stop">The end value of the sequence, unless `endpoint` is set to False.</param>
            <param name="retstep">return (`samples`, `step`), where `step` is the spacing between samples.</param>
            <param name="num">Number of samples to generate.Default is 50.Must be non-negative.</param>
            <param name="endpoint">If True, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="dtype">The type of the output array.If `dtype` is not given, infer the data type from the other input arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.linspace(System.Double,System.Double,System.Double@,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced numbers over a specified interval.
            </summary>
            <param name="start">The starting value of the sequence</param>
            <param name="stop">The end value of the sequence, unless `endpoint` is set to False.</param>
            <param name="retstep">return (`samples`, `step`), where `step` is the spacing between samples.</param>
            <param name="num">Number of samples to generate.Default is 50.Must be non-negative.</param>
            <param name="endpoint">If True, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="dtype">The type of the output array.If `dtype` is not given, infer the data type from the other input arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.linspace(System.Decimal,System.Decimal,System.Decimal@,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced numbers over a specified interval.
            </summary>
            <param name="start">The starting value of the sequence</param>
            <param name="stop">The end value of the sequence, unless `endpoint` is set to False.</param>
            <param name="retstep">return (`samples`, `step`), where `step` is the spacing between samples.</param>
            <param name="num">Number of samples to generate.Default is 50.Must be non-negative.</param>
            <param name="endpoint">If True, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="dtype">The type of the output array.If `dtype` is not given, infer the data type from the other input arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.linspace(System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex@,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced numbers over a specified interval.
            </summary>
            <param name="start">The starting value of the sequence</param>
            <param name="stop">The end value of the sequence, unless `endpoint` is set to False.</param>
            <param name="retstep">return (`samples`, `step`), where `step` is the spacing between samples.</param>
            <param name="num">Number of samples to generate.Default is 50.Must be non-negative.</param>
            <param name="endpoint">If True, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="dtype">The type of the output array.If `dtype` is not given, infer the data type from the other input arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.linspace(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return evenly spaced numbers over a specified interval.
            </summary>
            <param name="start">The starting value of the sequence</param>
            <param name="stop">The end value of the sequence, unless `endpoint` is set to False.</param>
            <param name="retstep">return (`samples`, `step`), where `step` is the spacing between samples.</param>
            <param name="num">Number of samples to generate.Default is 50.Must be non-negative.</param>
            <param name="endpoint">If True, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="dtype">The type of the output array.If `dtype` is not given, infer the data type from the other input arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logspace(System.Int64,System.Int64,System.Int32,System.Boolean,System.Double,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale.
            </summary>
            <param name="start">the starting value of the sequence</param>
            <param name="stop">is the final value of the sequence</param>
            <param name="num">Number of samples to generate.  Default is 50.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="_base">The base of the log space.</param>
            <param name="dtype">The type of the output array</param>
            <returns></returns>                   
        </member>
        <member name="M:NumpyDotNet.np.logspace(System.Double,System.Double,System.Int32,System.Boolean,System.Double,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale.
            </summary>
            <param name="start">the starting value of the sequence</param>
            <param name="stop">is the final value of the sequence</param>
            <param name="num">Number of samples to generate.  Default is 50.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="_base">The base of the log space.</param>
            <param name="dtype">The type of the output array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logspace(System.Decimal,System.Decimal,System.Int32,System.Boolean,System.Double,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale.
            </summary>
            <param name="start">the starting value of the sequence</param>
            <param name="stop">is the final value of the sequence</param>
            <param name="num">Number of samples to generate.  Default is 50.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="_base">The base of the log space.</param>
            <param name="dtype">The type of the output array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logspace(System.Numerics.Complex,System.Numerics.Complex,System.Int32,System.Boolean,System.Double,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale.
            </summary>
            <param name="start">the starting value of the sequence</param>
            <param name="stop">is the final value of the sequence</param>
            <param name="num">Number of samples to generate.  Default is 50.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="_base">The base of the log space.</param>
            <param name="dtype">The type of the output array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logspace(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Int32,System.Boolean,System.Double,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale.
            </summary>
            <param name="start">the starting value of the sequence</param>
            <param name="stop">is the final value of the sequence</param>
            <param name="num">Number of samples to generate.  Default is 50.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <param name="_base">The base of the log space.</param>
            <param name="dtype">The type of the output array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.geomspace(System.Int64,System.Int64,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale(a geometric progression).
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The final value of the sequence</param>
            <param name="num">Number of samples to generate.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.geomspace(System.Decimal,System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Return numbers spaced evenly on a log scale(a geometric progression).
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The final value of the sequence</param>
            <param name="num">Number of samples to generate.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.geomspace(System.Double,System.Double,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale(a geometric progression).
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The final value of the sequence</param>
            <param name="num">Number of samples to generate.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.geomspace(System.Numerics.Complex,System.Numerics.Complex,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale(a geometric progression).
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The final value of the sequence</param>
            <param name="num">Number of samples to generate.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.geomspace(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Int32,System.Boolean,NumpyDotNet.dtype)">
            <summary>
            Return numbers spaced evenly on a log scale(a geometric progression).
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The final value of the sequence</param>
            <param name="num">Number of samples to generate.</param>
            <param name="endpoint">If true, `stop` is the last sample.Otherwise, it is not included.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fromfile(System.String,NumpyDotNet.dtype,System.Int32,System.String)">
            <summary>
            Reads the contents of a text or binary file and turns the contents into an array. If
            'sep' is specified the file is assumed to be text, other it is assumed binary.
            </summary>
            <param name="file">file name string</param>
            <param name="dtype">Optional type for the resulting array, default is double</param>
            <param name="count">Optional number of array elements to read, default reads all elements</param>
            <param name="sep">Optional separator for text elements</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fromfile(System.IO.Stream,NumpyDotNet.dtype,System.Int32,System.String)">
            <summary>
            Reads the contents of a text or binary file and turns the contents into an array. If
            'sep' is specified the file is assumed to be text, other it is assumed binary.
            </summary>
            <param name="fileStream">Stream containing data</param>
            <param name="dtype">Optional type for the resulting array, default is double</param>
            <param name="count">Optional number of array elements to read, default reads all elements</param>
            <param name="sep">Optional separator for text elements</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tofile(NumpyDotNet.ndarray,System.String,System.String,System.String)">
            <summary>
            writes the specified array contents to the specified file
            </summary>
            <param name="arr">array with data to write to file</param>
            <param name="fileName">full path name of file to write</param>
            <param name="sep">>Optional separator for text elements</param>
            <param name="format">Optional output format specifier</param>
        </member>
        <member name="M:NumpyDotNet.np.tofile(NumpyDotNet.ndarray,System.IO.Stream,System.String,System.String)">
            <summary>
            writes the specified array contents to the specified file
            </summary>
            <param name="arr">array with data to write to file</param>
            <param name="fileStream">.NET stream to write file contents to</param>
            <param name="sep">>Optional separator for text elements</param>
            <param name="format">Optional output format specifier</param>
        </member>
        <member name="M:NumpyDotNet.np.frombuffer(System.Byte[],NumpyDotNet.dtype,System.Int32,System.Int32)">
            <summary>
            converts a byte buffer of data into the specified data type.
            </summary>
            <param name="buffer">buffer of data to convert</param>
            <param name="dtype">type of data to output.  if null, Float64 will be returned</param>
            <param name="count">number of bytes to copy</param>
            <param name="offset">offset into buffer to start copying.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.view(NumpyDotNet.ndarray,NumpyDotNet.dtype,System.Object)">
            <summary>
            New view of array with the same data.
            </summary>
            <param name="arr">array to take new view from</param>
            <param name="dtype">Data-type of the returned view</param>
            <param name="type">not used</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.square(System.Object)">
            <summary>
            Return the element-wise square of the input.
            </summary>
            <param name="a">Input data</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.sqrt(System.Object)">
            <summary>
            Return the non-negative square-root of an array, element-wise.
            </summary>
            <param name="a">The values whose square-roots are required.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cbrt(System.Object)">
            <summary>
            Return the cube-root of an array, element-wise.
            </summary>
            <param name="a">The values whose cube-roots are required.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.absolute(System.Object)">
            <summary>
            Calculate the absolute value element-wise.
            </summary>
            <param name="a">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fabs(System.Object)">
            <summary>
            Compute the absolute values element-wise.
            </summary>
            <param name="a">The array of numbers for which the absolute values are required</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(System.Object,System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(NumpyDotNet.ndarray,System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(System.ValueTuple{System.Object,System.Object},System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(System.ValueTuple{System.Object,System.Object,System.Object},System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(System.ValueTuple{System.Object,System.Object,System.Object,System.Object},System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray},System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.concatenate(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Nullable{System.Int32})">
            <summary>
            Join a sequence of arrays along an existing axis.
            </summary>
            <param name="value">sequence of array_like</param>
            <param name="axis">The axis along which the arrays will be joined</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.where(System.Object,System.Object,System.Object)">
            <summary>
            Return elements chosen from x or y depending on condition.
            </summary>
            <param name="condition">array_like, bool, Where True, yield x, otherwise yield y.</param>
            <param name="x">Values from which to choose.</param>
            <param name="y">Values from which to choose.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.packbits(NumpyDotNet.ndarray,System.Int32)">
            <summary>
             Packs the elements of a binary-valued array into bits in a uint8 array.
            </summary>
            <param name="input">An array of integers or booleans whose elements should be packed to bits</param>
            <param name="axis">The dimension over which bit-packing is done. 0 implies packing the flattened array</param>
            <returns>Array of type uint8 whose elements represent bits corresponding to the logical (0 or nonzero) value of the input elements. 
            The shape of packed has the same number of dimensions as the input (unless axis is None, in which case the output is 1-D).</returns>
        </member>
        <member name="M:NumpyDotNet.np.unpackbits(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Unpacks elements of a uint8 array into a binary-valued output array. Each element of myarray represents a bit-field that should 
            be unpacked into a binary-valued output array. The shape of the output array is either 1-D (if axis is None) or the same shape 
            as the input array with unpacking done along the axis specified.
            </summary>
            <param name="input">Input array. ndarray, uint8 type</param>
            <param name="axis">The dimension over which bit-unpacking is done. 0 implies unpacking the flattened array.</param>
            <returns>ndarray, uint8 type. The elements are binary-valued (0 or 1).</returns>
        </member>
        <member name="M:NumpyDotNet.np.bitwise_and(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the bit-wise AND of two arrays element-wise.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="out"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.bitwise_or(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the bit-wise OR of two arrays element-wise.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="out"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.bitwise_xor(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the bit-wise XOR of two arrays element-wise.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="out"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.bitwise_not(System.Object)">
            <summary>
            invert the bits of the specified array.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logical_and(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the truth value of x1 AND x2 element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">(optional) A location into which the result is stored</param>
            <param name="where">(optional) This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logical_or(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the truth value of x1 OR x2 element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">(optional) A location into which the result is stored</param>
            <param name="where">(optional) This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logical_xor(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the truth value of x1 XOR x2, element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">(optional) A location into which the result is stored</param>
            <param name="where">(optional) This condition is broadcast over the input. At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.logical_not(System.Object)">
            <summary>
            Compute the truth value of NOT x element-wise.
            </summary>
            <param name="input">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.greater(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the truth value of (x1 > x2) element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.greater_equal(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the truth value of (x1 >= x2) element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NumpyDotNet.np.less(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:NumpyDotNet.np.less_equal(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)" -->
        <member name="M:NumpyDotNet.np.equal(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the truth value of (x1 == x2) element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.not_equal(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Return the truth value of (x1 != x2) element-wise.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.invert(System.Object)">
            <summary>
            Compute bit-wise inversion, or bit-wise NOT, element-wise.
            </summary>
            <param name="input">Only integer and boolean types are handled.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.right_shift(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Shift the bits of an integer to the right.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Number of bits to remove at the right of x1</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.left_shift(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Shift the bits of an integer to the left.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Number of bits to remove at the right of x1</param>
            <param name="out">A location into which the result is stored</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.floor(System.Object)">
            <summary>
            Return the floor of the input, element-wise.
            </summary>
            <param name="x">Input data.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isnan(NumpyDotNet.ndarray)">
            <summary>
            Test element-wise for NaN and return result as a boolean array.
            </summary>
            <param name="input">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isfinite(System.Object)">
            <summary>
            Test element-wise for positive or negative infinity.
            </summary>
            <param name="o">Input values</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isinf(System.Object)">
            <summary>
            Test element-wise for positive or negative infinity.
            </summary>
            <param name="o">Input values</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isneginf(System.Object)">
            <summary>
            Test element-wise for negative infinity, return result as bool array.
            </summary>
            <param name="o">The input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isposinf(System.Object)">
            <summary>
            Test element-wise for positive infinity, return result as bool array.
            </summary>
            <param name="o">The input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ViewFromAxis(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Creates a view that matches only the specified axis values
            </summary>
            <param name="a"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.correlate(System.Object,System.Object,NumpyLib.NPY_CONVOLE_MODE)">
            <summary>
            Cross-correlation of two 1-dimensional sequences.
            </summary>
            <param name="o1">Input sequence</param>
            <param name="o2">Input sequence</param>
            <param name="mode">{‘valid’, ‘same’, ‘full’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.maximum(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Element-wise maximum of array elements.
            </summary>
            <param name="x1">The arrays holding the elements to be compared.</param>
            <param name="x2">The arrays holding the elements to be compared.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.minimum(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Element-wise minimum of array elements.
            </summary>
            <param name="x1">The arrays holding the elements to be compared.</param>
            <param name="x2">The arrays holding the elements to be compared.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fmax(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Element-wise maximum of array elements.
            </summary>
            <param name="x1">The arrays holding the elements to be compared.</param>
            <param name="x2">The arrays holding the elements to be compared.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fmin(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Element-wise minimum of array elements.
            </summary>
            <param name="x1">The arrays holding the elements to be compared.</param>
            <param name="x2">The arrays holding the elements to be compared.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.heaviside(System.Object,System.Object,NumpyDotNet.ndarray,System.Object)">
            <summary>
            Compute the Heaviside step function.
            </summary>
            <param name="x1">Input values.</param>
            <param name="x2">Input values.</param>
            <param name="out">A location into which the result is stored.</param>
            <param name="where">At locations where the condition is True, the out array will be set to the ufunc result. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.copyto(NumpyDotNet.ndarray,System.Object,NumpyLib.NPY_CASTING,System.Object)">
            <summary>
            Copies values from one array to another, broadcasting as necessary.
            </summary>
            <param name="dst">The array into which values are copied.</param>
            <param name="src">The array from which values are copied.</param>
            <param name="casting">{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional</param>
            <param name="where"> A boolean array which is broadcasted to match the dimensions of dst, and selects elements to copy from src to dst wherever it contains the value True.</param>
        </member>
        <member name="M:NumpyDotNet.np.broadcast(System.Object[])">
            <summary>
            Produce an object that mimics broadcasting.
            </summary>
            <param name="aobjects">Input parameters.</param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.np.tuning.EnableTryCatchOnCalculations">
            <summary>
            enable/disable try catch around calculations.  
            Disabling will likely increase performance but crash the application if exception taken during calculation
            </summary>
        </member>
        <member name="M:NumpyDotNet.np.CopyObject(NumpyDotNet.ndarray,System.Object)">
            <summary>
            Copies the source object into the destination array.  src can be
            any type so long as the number of elements matches dest.  In the
            case of strings, they will be padded with spaces if needed but
            can not be longer than the number of elements in dest.
            </summary>
            <param name="dest">Destination array</param>
            <param name="src">Source object</param>
        </member>
        <member name="M:NumpyDotNet.np.SetField(NumpyDotNet.ndarray,NumpyLib.NpyArray_Descr,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="dest"></param>
            <param name="descr"></param>
            <param name="offset"></param>
            <param name="src"></param>
        </member>
        <member name="M:NumpyDotNet.np.FromAny(System.Object,NumpyDotNet.dtype,System.Int32,System.Int32,NumpyLib.NPYARRAYFLAGS,System.Object)">
            <summary>
            Constructs a new array from multiple input types, like lists, arrays, etc.
            </summary>
            <param name="src"></param>
            <param name="descr"></param>
            <param name="minDepth"></param>
            <param name="maxDepth"></param>
            <param name="requires"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ObjectDepthAndDimension(System.Object,System.Int64[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Walks a set of nested lists (or tuples) to get the dimensions.  The dimensionality must
             be consistent for each nesting level. Thus, if one level is a mix of lsits and scalars,
             it is truncated and all are assumed to be scalar objects.
            
             That is, [[1, 2], 3, 4] is a 1-d array of 3 elements.  It just happens that element 0 is
             an object that is a list of [1, 2].
             </summary>
             <param name="src">Input object to talk</param>
             <param name="dims">Array of dimensions of size 'max' filled in up to the return value</param>
             <param name="idx">Current iteration depth, always start with 0</param>
             <param name="max">Size of dims array at the start, then becomes depth so far when !firstElem</param>
             <param name="firstElem">True if processing the first element of the list (populates dims), false for subsequent (checks dims)</param>
             <returns>Number of dimensions (depth of nesting)</returns>
        </member>
        <member name="M:NumpyDotNet.np.FromIEnumerable(System.Collections.Generic.IEnumerable{System.Object},NumpyDotNet.dtype,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Builds an array from a sequence of objects.  The elements of the sequence
             can also be sequences in which case this function recursively walks the
             nested sequences and builds an n dimentional array.
            
             IronPython tuples and lists work as sequences.
             </summary>
             <param name="src">Input sequence</param>
             <param name="descr">Desired array element type or null to determine automatically</param>
             <param name="fortran">True if array should be Fortran layout, false for C</param>
             <param name="minDepth"></param>
             <param name="maxDepth"></param>
             <returns>New array instance</returns>
        </member>
        <member name="M:NumpyDotNet.np.FindArrayType(System.Object,NumpyDotNet.dtype,System.Int32)">
            <summary>
            Given some object and an optional minimum type, returns the appropriate type descriptor.
            Equivalent to _array_find_type in common.c of CPython interface.
            </summary>
            <param name="src">Source object</param>
            <param name="minitype">Minimum type, or null if any</param>
            <param name="max">Maximum dimensions</param>
            <returns>Type descriptor fitting requirements</returns>
        </member>
        <member name="M:NumpyDotNet.np.FindScalarType(System.Object)">
            <summary>
            Returns the descriptor for a given native type or null if src is
            not a scalar type
            </summary>
            <param name="src">Object to type</param>
            <returns>Descriptor for type of 'src' or null if not scalar</returns>
        </member>
        <member name="M:NumpyDotNet.np.DiscoverDepth(System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Recursively discovers the nesting depth of a source object.
            </summary>
            <param name="src">Input object</param>
            <param name="max">Max recursive depth</param>
            <param name="stopAtString">Stop discovering if string is encounted</param>
            <param name="stopAtTuple">Stop discovering if tuple is encounted</param>
            <returns>Nesting depth or -1 on error</returns>
        </member>
        <member name="M:NumpyDotNet.np.DiscoverDimensions(System.Object,System.Int32,System.Int64[],System.Int32,System.Boolean)">
            <summary>
            Recursively discovers the size of each dimension given an input object.
            </summary>
            <param name="src">Input object</param>
            <param name="numDim">Number of dimensions</param>
            <param name="dims">Uninitialized array of dimension sizes to be filled in</param>
            <param name="dimIdx">Current index into dims, incremented recursively</param>
            <param name="checkIt">Verify that src is consistent</param>
        </member>
        <member name="M:NumpyDotNet.np.inner(System.Object,System.Object)">
            <summary>
            Inner product of two arrays.
            </summary>
            <param name="a">input array</param>
            <param name="b">input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.dot(System.Object,System.Object)">
            <summary>
            Dot product of two arrays. 
            </summary>
            <param name="a">input array</param>
            <param name="b">input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.matmul(System.Object,System.Object)">
            <summary>
            Matrix product of two arrays.
            </summary>
            <param name="x1">Input array</param>
            <param name="x2">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.MatrixProduct(System.Object,System.Object)">
            <summary>
            Matrix product of two arrays.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.load(System.String)">
            <summary>
            Load arrays or pickled objects from .npy files
            </summary>
            <param name="PathName">complete file name to load into an ndarray</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.save(System.String,NumpyDotNet.ndarray)">
            <summary>
            Save an array to a binary file in NumPy .npy format.
            </summary>
            <param name="PathName">pathname to save file</param>
            <param name="array">array to save as binary file</param>
        </member>
        <member name="M:NumpyDotNet.np.result_type(System.Object,System.Object,System.Object)">
            <summary>
            Returns the type that results from applying the NumPy type promotion rules to the arguments.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="type_suggestion"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.result_type(NumpyDotNet.dtype,NumpyDotNet.dtype,System.Object)">
            <summary>
            Returns the type that results from applying the NumPy type promotion rules to the arguments.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="type_suggestion"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.result_type(NumpyLib.NPY_TYPES)">
            <summary>
            Returns the type that results from applying the NumPy type promotion rules to the arguments.
            </summary>
            <param name="type_num"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.promote_types(NumpyDotNet.dtype,NumpyDotNet.dtype)">
            <summary>
            Returns the data type with the smallest size and smallest scalar kind to which both type1 and type2
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.zeros(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Return a new array of given shape and type, filled with zeros
            </summary>
            <param name="shape">int or sequence of ints, Shape of the new array</param>
            <param name="dtype">(optional) Desired output data-type</param>
            <param name="order">(optional) {‘C’, ‘F’}, Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory.</param>
            <returns>Array of zeros with the given shape, dtype, and order.</returns>
        </member>
        <member name="M:NumpyDotNet.np.zeros_like(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER,System.Boolean)">
            <summary>
            Return an array of zeros with the same shape and type as a given array.
            </summary>
            <param name="src">The shape and data-type of a define these same attributes of the returned array.</param>
            <param name="dtype">(optional) Overrides the data type of the result</param>
            <param name="order">(optional) {‘C’, ‘F’, ‘A’, or ‘K’}, Overrides the memory layout of the result. ‘C’ means C-order, ‘F’ means F-order, ‘A’ means ‘F’ if a is Fortran contiguous, ‘C’ otherwise. ‘K’ means match the layout of a as closely as possible.</param>
            <param name="subok">(optional) If True, then the newly created array will use the sub-class type of ‘a’, otherwise it will be a base-class array. Defaults to True.</param>
            <returns>Array of zeros with the same shape and type as a.</returns>
        </member>
        <member name="M:NumpyDotNet.np.ones(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Return a new array of given shape and type, filled with ones
            </summary>
            <param name="shape">int or sequence of ints, Shape of the new array</param>
            <param name="dtype">(optional) Desired output data-type</param>
            <param name="order">(optional) {‘C’, ‘F’}, Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory.</param>
            <returns>Array of ones with the given shape, dtype, and order.</returns>
        </member>
        <member name="M:NumpyDotNet.np.ones_like(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER,System.Boolean)">
            <summary>
            Return an array of ones with the same shape and type as a given array.
            </summary>
            <param name="src">The shape and data-type of a define these same attributes of the returned array.</param>
            <param name="dtype">(optional) Overrides the data type of the result</param>
            <param name="order">(optional) {‘C’, ‘F’, ‘A’, or ‘K’}, Overrides the memory layout of the result. ‘C’ means C-order, ‘F’ means F-order, ‘A’ means ‘F’ if src is Fortran contiguous, ‘C’ otherwise. ‘K’ means match the layout of a as closely as possible.</param>
            <param name="subok">(optional) If True, then the newly created array will use the sub-class type of ‘a’, otherwise it will be a base-class array. Defaults to True.</param>
            <returns>Array of ones with the same shape and type as a.</returns>
        </member>
        <member name="M:NumpyDotNet.np.empty(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Return a new array of given shape and type, without initializing entries
            </summary>
            <param name="shape">int or tuple of int, Shape of the empty array</param>
            <param name="dtype">(optional) Desired output data-type</param>
            <param name="order">(optional) {‘C’, ‘F’}, Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
        </member>
        <member name="M:NumpyDotNet.np.empty_like(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER,System.Boolean)">
            <summary>
            Return a new array with the same shape and type as a given array.
            </summary>
            <param name="src">The shape and data-type of a define these same attributes of the returned array.</param>
            <param name="dtype">(optional) Overrides the data type of the result</param>
            <param name="order">(optional) {‘C’, ‘F’, ‘A’, or ‘K’}, Overrides the memory layout of the result. ‘C’ means C-order, ‘F’ means F-order, ‘A’ means ‘F’ if a is Fortran contiguous, ‘C’ otherwise. ‘K’ means match the layout of a as closely as possible.</param>
            <param name="subok">(optional) If True, then the newly created array will use the sub-class type of ‘a’, otherwise it will be a base-class array. Defaults to True.</param>
            <returns>Array of uninitialized (arbitrary) data with the same shape and type as a.</returns>
        </member>
        <member name="M:NumpyDotNet.np.full(System.Object,System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Return a new array of given shape and type, filled with fill_value
            </summary>
            <param name="shape">int or sequence of ints, Shape of the new array</param>
            <param name="fill_value">Fill value.  Must be scalar type</param>
            <param name="dtype">(optional) Desired output data-type</param>
            <param name="order">(optional) {‘C’, ‘F’}, Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
        </member>
        <member name="M:NumpyDotNet.np.full_like(System.Object,System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER,System.Boolean)">
            <summary>
            Return an array of zeros with the same shape and type as a given array.
            </summary>
            <param name="src">The shape and data-type of a define these same attributes of the returned array.</param>
            <param name="fill_value">Fill value.  Must be scalar type</param>
            <param name="dtype">(optional) Overrides the data type of the result</param>
            <param name="order">(optional) {‘C’, ‘F’, ‘A’, or ‘K’}, Overrides the memory layout of the result. ‘C’ means C-order, ‘F’ means F-order, ‘A’ means ‘F’ if a is Fortran contiguous, ‘C’ otherwise. ‘K’ means match the layout of a as closely as possible.</param>
            <param name="subok">(optional) If True, then the newly created array will use the sub-class type of ‘a’, otherwise it will be a base-class array. Defaults to True.</param>
            <returns>Array of fill_value with the same shape and type as a.</returns>
        </member>
        <member name="M:NumpyDotNet.np.count_nonzero(System.Object,System.Nullable{System.Int32})">
            <summary>
            Counts the number of non-zero values in the array a.
            </summary>
            <param name="a">The array for which to count non-zeros.</param>
            <param name="axis">Axis along which to count non-zeros. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.asarray(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Convert the input to an array.
            </summary>
            <param name="a">Input data, in any form that can be converted to an array. </param>
            <param name="dtype">data-type, optional. By default, the data-type is inferred from the input data.</param>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.asanyarray(System.Object,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Convert the input to an ndarray, but pass ndarray subclasses through.
            </summary>
            <param name="a">Input data, in any form that can be converted to an array.</param>
            <param name="dtype">data-type, optional. By default, the data-type is inferred from the input data.</param>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.ascontiguousarray(System.Object,NumpyDotNet.dtype)">
            <summary>
            Return a contiguous array (ndim >= 1) in memory (C order).
            </summary>
            <param name="a">Input array.</param>
            <param name="dtype">Data-type of returned array. By default, the data-type is inferred from the input data.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.asfortranarray(NumpyDotNet.ndarray,NumpyDotNet.dtype)">
            <summary>
            Return an array (ndim >= 1) laid out in Fortran order in memory.
            </summary>
            <param name="a">Input array.</param>
            <param name="dtype">Data-type of returned array. By default, the data-type is inferred from the input data.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.asfarray(System.Object,NumpyDotNet.dtype)">
            <summary>
            Return an array converted to a float type.
            </summary>
            <param name="a">The input array.</param>
            <param name="dtype">Float type code to coerce input array a. If dtype is one of the ‘int’ dtypes, it is replaced with float64.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.require(NumpyDotNet.ndarray,NumpyDotNet.dtype,System.Char[])">
            <summary>
            Return an ndarray of the provided type that satisfies requirements.
            </summary>
            <param name="a">The object to be converted to a type - and - requirement - satisfying array.</param>
            <param name="dtype">The required data - type.If None preserve the current dtype.</param>
            <param name="requirements">str or list of str</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isfortran(NumpyDotNet.ndarray)">
            <summary>
            Returns True if the array is Fortran contiguous but* not*C contiguous.
            </summary>
            <param name="a">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.argwhere(NumpyDotNet.ndarray)">
            <summary>
            Find the indices of array elements that are non - zero, grouped by element.
            </summary>
            <param name="a">Input data.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.flatnonzero(System.Object)">
            <summary>
            Return indices that are non - zero in the flattened version of a.
            </summary>
            <param name="a">Input data</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.outer(System.Object,System.Object)">
            <summary>
            Compute the outer product of two vectors.
            </summary>
            <param name="a">First input vector.</param>
            <param name="b">Second input vector.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tensordot(System.Object,System.Object,System.Int32)">
            <summary>
            Compute tensor dot product along specified axes.
            </summary>
            <param name="a">Tensor to “dot”.</param>
            <param name="b">Tensor to “dot”.</param>
            <param name="axis">sum over the last N axes of a and the first N axes of b in order.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tensordot(System.Object,System.Object,System.ValueTuple{System.Int64[],System.Int64[]})">
            <summary>
            Compute tensor dot product along specified axes.
            </summary>
            <param name="a">Tensor to “dot”.</param>
            <param name="b">Tensor to “dot”.</param>
            <param name="axes">a list of axes to be summed over</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.roll(System.Object,System.Int32,System.Object)">
            <summary>
            Roll array elements along a given axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="shift">The number of places by which elements are shifted.</param>
            <param name="axis">Axis along which elements are shifted</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.rollaxis(NumpyDotNet.ndarray,System.Int32,System.Int32)">
            <summary>
            Roll the specified axis backwards, until it lies in a given position.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">The axis to roll backwards.The positions of the other axes do not change relative to one another.</param>
            <param name="start">The axis is rolled until it lies before this position.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.moveaxis(NumpyDotNet.ndarray,System.Object,System.Object)">
            <summary>
            Move axes of an array to new positions.
            </summary>
            <param name="a">The array whose axes should be reordered.</param>
            <param name="source">Original positions of the axes to move. These must be unique.</param>
            <param name="destination">Destination positions for each of the original axes.These must also be unique.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.cross(System.Object,System.Object,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Return the cross product of two (arrays of) vectors.
            </summary>
            <param name="a">Components of the first vector(s)</param>
            <param name="b">Components of the second vector(s)</param>
            <param name="axisa">Axis of `a` that defines the vector(s)</param>
            <param name="axisb">Axis of `b` that defines the vector(s)</param>
            <param name="axisc">Axis of `c` containing the cross product vector(s)</param>
            <param name="axis">If defined, the axis of `a`, `b` and `c` that defines the vector(s) and cross product(s).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.indices(System.Object,NumpyDotNet.dtype)">
            <summary>
            Return an array representing the indices of a grid.
            </summary>
            <param name="dimensions">The shape of the grid.</param>
            <param name="dtype">Data type of the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isscalar(System.Object)">
            <summary>
            Returns True if the type of element is a scalar type.
            </summary>
            <param name="element">Input argument, can be of any type and shape.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.identity(System.Int32,NumpyDotNet.dtype)">
            <summary>
            Return the identity array.
            </summary>
            <param name="n">Number of rows (and columns) in n x n output</param>
            <param name="dtype">(optional) Data-type of the output. Defaults to float</param>
            <returns> x n array with its main diagonal set to one, and all other elements 0.</returns>
        </member>
        <member name="M:NumpyDotNet.np.allclose(System.Object,System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns True if two arrays are element - wise equal within a tolerance.
            </summary>
            <param name="a">Input array to compare.</param>
            <param name="b">Input array to compare.</param>
            <param name="rtol">The relative tolerance parameter.</param>
            <param name="atol">The absolute tolerance parameter.</param>
            <param name="equal_nan">Whether to compare NaN's as equal.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.isclose(System.Object,System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns a boolean array where two arrays are element - wise equal within a tolerance.
            </summary>
            <param name="a">Input array to compare</param>
            <param name="b">Input array to compare</param>
            <param name="rtol">The relative tolerance parameter</param>
            <param name="atol">The absolute tolerance parameter</param>
            <param name="equal_nan">Whether to compare NaN's as equal.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array_equal(System.Object,System.Object)">
            <summary>
            True if two arrays have the same shape and elements, False otherwise.
            </summary>
            <param name="a1">Input array</param>
            <param name="a2">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array_equiv(System.Object,System.Object)">
            <summary>
            Returns True if input arrays are shape consistent and all elements equal.
            </summary>
            <param name="a1">Input array</param>
            <param name="a2">Input array</param>
            <returns></returns>
        </member>
        <member name="F:NumpyDotNet.np.random_serializable.has_binomial">
            * The rk_state structure has been extended to store the following
        </member>
        <member name="M:NumpyDotNet.np.atleast_1d(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Convert inputs to arrays with at least one dimension.
            </summary>
            <param name="arys">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.atleast_1d(System.Object)">
            <summary>
            Convert inputs to arrays with at least one dimension.
            </summary>
            <param name="array">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.atleast_2d(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Convert inputs as arrays with at least two dimensions.
            </summary>
            <param name="arys">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.atleast_2d(System.Object)">
            <summary>
            Convert inputs as arrays with at least two dimensions.
            </summary>
            <param name="arys">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.atleast_3d(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Convert inputs as arrays with at least three dimensions.
            </summary>
            <param name="arys">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.atleast_3d(System.Object)">
            <summary>
            Convert inputs as arrays with at least three dimensions.
            </summary>
            <param name="arys">One or more input arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.apply_along_axis(NumpyDotNet.np.apply_along_axis_indices,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Apply a function to 1-D slices along the given axis.
            </summary>
            <param name="fn">This function should accept 1-D arrays. It is applied to 1-D slices of arr along the specified axis.</param>
            <param name="axis">Axis along which arr is sliced.</param>
            <param name="arr">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.apply_along_axis(NumpyDotNet.np.apply_along_axis_view,System.Int32,NumpyDotNet.ndarray)">
            <summary>
            Apply a function to 1-D slices along the given axis.
            </summary>
            <param name="fn">This function should accept 1-D arrays. It is applied to 1-D slices of arr along the specified axis.</param>
            <param name="axis">Axis along which arr is sliced.</param>
            <param name="arr">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.apply_along_axis(NumpyDotNet.np.apply_along_axis_fn,System.Int32,NumpyDotNet.ndarray,System.Object[])">
            <summary>
            Apply a function to 1-D slices along the given axis.
            </summary>
            <param name="fn">This function should accept 1-D arrays. It is applied to 1-D slices of arr along the specified axis.</param>
            <param name="axis">Axis along which arr is sliced.</param>
            <param name="arr">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.apply_over_axes(NumpyDotNet.np.apply_over_axes_fn,System.Object,System.Object)">
            <summary>
            Apply a function repeatedly over multiple axes.
            </summary>
            <param name="func">This function must take two arguments, func(a, axis).</param>
            <param name="a">Input array.</param>
            <param name="axes">Axes over which func is applied; the elements must be integers.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.vstack(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Stack arrays in sequence vertically(row wise).
            </summary>
            <param name="tup">sequence of ndarrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.hstack(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Stack arrays in sequence horizontally(column wise).
            </summary>
            <param name="tup">sequence of ndarrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.stack(System.Collections.Generic.ICollection{System.Object},System.Int32)">
            <summary>
            Join a sequence of arrays along a new axis.
            </summary>
            <param name="arrays">sequence of arrays</param>
            <param name="axis">The axis in the result array along which the input arrays are stacked.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.block(System.Object[])">
            <summary>
            Assemble an nd-array from nested lists of blocks.
            </summary>
            <param name="arrays">nested list of array_like or scalars </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.expand_dims(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Expand the shape of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis"> Position in the expanded axes where the new axis is placed.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.column_stack(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Stack 1-D arrays as columns into a 2-D array.
            </summary>
            <param name="tup">sequence of 1-D or 2-D arrays.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.row_stack(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Stack arrays in sequence vertically (row wise).
            </summary>
            <param name="tup">sequence of arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.dstack(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Stack arrays in sequence depth wise(along third axis).
            </summary>
            <param name="tup">sequence of arrays</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.array_split(NumpyDotNet.ndarray,System.Object,System.Int32)">
            <summary>
            Split an array into multiple sub-arrays.
            </summary>
            <param name="ary">Array to be divided into sub-arrays.</param>
            <param name="indices_or_sections">integers indicating number and size sections to split into</param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.split(NumpyDotNet.ndarray,System.Object,System.Int32)">
            <summary>
            Split an array into multiple sub-arrays.
            </summary>
            <param name="ary">Array to be divided into sub-arrays.</param>
            <param name="indices_or_sections">integers indicating number and size sections to split into</param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.hsplit(NumpyDotNet.ndarray,System.Object)">
            <summary>
            Split an array into multiple sub-arrays horizontally(column - wise).
            </summary>
            <param name="ary">Array to be divided into sub-arrays.</param>
            <param name="indices_or_sections">integers indicating number and size sections to split into</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.vsplit(NumpyDotNet.ndarray,System.Object)">
            <summary>
            Split an array into multiple sub-arrays vertically(row - wise).
            </summary>
            <param name="ary">Array to be divided into sub-arrays.</param>
            <param name="indices_or_sections">integers indicating number and size sections to split into</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.dsplit(NumpyDotNet.ndarray,System.Object)">
            <summary>
            Split array into multiple sub - arrays along the 3rd axis(depth)
            </summary>
            <param name="ary">Array to be divided into sub-arrays.</param>
            <param name="indices_or_sections">integers indicating number and size sections to split into</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.kron(System.Object,System.Object)">
            <summary>
            Kronecker product of two arrays.
            </summary>
            <param name="a">input array</param>
            <param name="b">input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tile(NumpyDotNet.ndarray,System.Object)">
            <summary>
            Construct an array by repeating A the number of times given by reps.
            </summary>
            <param name="A">The input array.</param>
            <param name="reps">The number of repetitions of `A` along each axis.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.as_strided(NumpyDotNet.ndarray,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Create a view into the array with the given shape and strides.
            </summary>
            <param name="x">Array to create a new.</param>
            <param name="oshape">The shape of the new array. </param>
            <param name="ostrides">The strides of the new array.</param>
            <param name="subok">If True, subclasses are preserved.</param>
            <param name="writeable">If set to False, the returned array will always be readonly.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.as_strided(NumpyDotNet.ndarray,System.Int64[],System.Int64[],System.Boolean,System.Boolean)">
            <summary>
            Create a view into the array with the given shape and strides.
            </summary>
            <param name="x">Array to create a new.</param>
            <param name="oshape">The shape of the new array. </param>
            <param name="ostrides">The strides of the new array.</param>
            <param name="subok">If True, subclasses are preserved.</param>
            <param name="writeable">If set to False, the returned array will always be readonly.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.broadcast_to(System.Object,System.Object,System.Boolean)">
            <summary>
            Broadcast an array to a new shape.
            </summary>
            <param name="array">The array to broadcast.</param>
            <param name="shape">The shape of the desired array.</param>
            <param name="subok">If True, then sub-classes will be passed-through, otherwise the returned array will be forced to be a base-class array (default).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.broadcast_arrays(System.Boolean,System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray})">
            <summary>
            Broadcast any number of arrays against each other.
            </summary>
            <param name="subok">If True, then sub-classes will be passed-through</param>
            <param name="args">The arrays to broadcast.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.fliplr(NumpyDotNet.ndarray)">
            <summary>
            Flip array in the left/right direction.
            </summary>
            <param name="m">Input array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.flipud(NumpyDotNet.ndarray)">
            <summary>
            Flip array in the up/down direction.
            </summary>
            <param name="m">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.eye(System.Int32,System.Nullable{System.Int32},System.Int32,NumpyDotNet.dtype,NumpyLib.NPY_ORDER)">
            <summary>
            Return a 2-D array with ones on the diagonal and zeros elsewhere
            </summary>
            <param name="N">Number of rows in the output</param>
            <param name="M">(optional) Number of columns in the output. If None, defaults to N</param>
            <param name="k">(optional) Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.</param>
            <param name="dtype">(optional) Data-type of the returned array</param>
            <param name="order">(optional)</param>
            <returns>An array where all elements are equal to zero, except for the k-th diagonal, whose values are equal to one</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NumpyDotNet.np.diag(NumpyDotNet.ndarray,System.Int32)" -->
        <member name="M:NumpyDotNet.np.diagflat(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Create a two-dimensional array with the flattened input as a diagonal.
            </summary>
            <param name="v">Input data</param>
            <param name="k">Diagonal to set; 0, the default, corresponds to the "main" diagonal, a positive(negative) `k` giving the number of the diagonal above (below) the main.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tri(System.Int32,System.Nullable{System.Int32},System.Int32,NumpyDotNet.dtype)">
            <summary>
            An array with ones at and below the given diagonal and zeros elsewhere.
            </summary>
            <param name="N">Number of rows in the array.</param>
            <param name="M">Number of columns in the array.</param>
            <param name="k">The sub-diagonal at and below which the array is filled.'k' = 0 is the main diagonal, while 'k' LT 0 is below it, and 'k' GT 0 is above.The default is 0.</param>
            <param name="dtype">Data type of the returned array.  The default is float.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tril(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Lower triangle of an array.
            </summary>
            <param name="m">input array.</param>
            <param name="k">Diagonal above which to zero elements.  `k = 0` (the default) is the main diagonal, 'k LT 0' is below it and 'k GT 0' is above.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.triu(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Upper triangle of an array.
            </summary>
            <param name="m">input array.</param>
            <param name="k">Diagonal below which to zero elements.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.vander(System.Object,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Generate a Vandermonde matrix.
            </summary>
            <param name="x">1-D input array</param>
            <param name="N">Number of columns in the output</param>
            <param name="increasing">If True, the powers increase from left to right, if False(the default) they are reversed.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.mask_indices(System.Int32,NumpyDotNet.np.mask_indices_delegate,System.Int32)">
            <summary>
            Return the indices to access (n, n) arrays, given a masking function.
            </summary>
            <param name="n">The returned indices will be valid to access arrays of shape (n, n).</param>
            <param name="mask_func">A function whose call signature is similar to that of `triu`, `tril`.</param>
            <param name="k">An optional argument which is passed through to `mask_func`.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tril_indices(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Return the indices for the lower-triangle of an (n, m) array.
            </summary>
            <param name="n">The row dimension of the arrays for which the returned indices will be valid.</param>
            <param name="k">Diagonal offset (see 'tril' for details).</param>
            <param name="m">The column dimension of the arrays for which the returned arrays will be valid.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.tril_indices_from(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Return the indices for the lower-triangle of arr.
            </summary>
            <param name="arr">input array. The indices will be valid for square arrays whose dimensions are the same as arr.</param>
            <param name="k">Diagonal offset (see 'tril' for details).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.triu_indices(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             Return the indices for the upper-triangle of an (n, m) array.
            </summary>
            <param name="n">The size of the arrays for which the returned indices will be valid.</param>
            <param name="k">Diagonal offset (see 'triu' for details).</param>
            <param name="m">The column dimension of the arrays for which the returned arrays will be valid. By default 'm' is taken equal to 'n'.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.triu_indices_from(NumpyDotNet.ndarray,System.Int32)">
            <summary>
            Return the indices for the upper-triangle of arr.
            </summary>
            <param name="arr"> ndarray, shape(N, N) The indices will be valid for square arrays.</param>
            <param name="k">Diagonal offset (see 'triu' for details).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nan_to_num(System.Object,System.Boolean)">
            <summary>
            Replace NaN with zero and infinity with large finite numbers
            </summary>
            <param name="x">Input data.</param>
            <param name="copy">Whether to create a copy of x (True) or to replace values in-place (False).</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.np.nan_to_num(NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Replace NaN with zero and infinity with large finite numbers
            </summary>
            <param name="x">Input data.</param>
            <param name="copy">Whether to create a copy of x (True) or to replace values in-place (False).</param>
            <returns></returns>
        </member>
        <member name="T:NumpyDotNet.ndarray">
            <summary>
            Implements the Numpy python 'ndarray' class
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.op_Explicit(NumpyDotNet.ndarray)~System.Boolean">
            special case for bools. Tries to convert all data types to true/false value
        </member>
        <member name="P:NumpyDotNet.ndarray.Name">
            <summary>
            User assigned name for allocated ndarray
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.ReprFunction">
            <summary>
            Sets a function to be triggered for the repr() operator or null to default to the
            built-in version.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.StrFunction">
            <summary>
            Sets a function to be triggered on the str() operator or ToString() method. Null defaults to
            the built-in version.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.SliceMe(System.Object[])">
            <summary>
            slicing/indexing function to set a breakpoint in
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.A(System.Object[])">
            <summary>
            sliced/indexed array cast to ndarray.  Throws exception if result is not ndarray. Maybe better than casting to ndarray everwhere.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.ndarray.ndim">
            <summary>
            Number of dimensions in the array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.shape">
            <summary>
            the shape of the array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.size">
            <summary>
            Total number of elements in the array.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.rawdata(System.Int64)">
            <summary>
            returns a raw pointer of the ndarray data.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.ndarray.Dtype">
            <summary>
            The type descriptor object for this array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.dtype">
            <summary>
            The type descriptor object for this array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.flags">
            <summary>
            Flags for this array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.ItemSize">
            <summary>
            size in bytes of the data items stored in this array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.ItemSizeDiv">
            <summary>
            value used to  convert data_offset to an index.  "data_offset >> ItemSizeDiv"
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.TypeNum">
            <summary>
            The data type of this ndarray
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.nbytes">
            <summary>
             total number of bytes in the ndarray 
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.T">
            <summary>
            transpose this array
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.astype(NumpyDotNet.dtype,System.Boolean)">
            <summary>
            Copy of the array, cast to a specified type.
            </summary>
            <param name="dtype">data type to cast to</param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.byteswap(System.Boolean)">
            <summary>
            Swap the bytes of the array elements
            </summary>
            <param name="inplace">If True, swap bytes in-place, default is False.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.Copy(NumpyLib.NPY_ORDER)">
            <summary>
            Return an array copy of the given object.
            </summary>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.dot(System.Object)">
            <summary>
            Dot product of two arrays.
            </summary>
            <param name="other">array to calculate dot product with</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.fill(System.Object)">
            <summary>
            Fill the array with a scalar value.
            </summary>
            <param name="scalar">value to file array with</param>
        </member>
        <member name="M:NumpyDotNet.ndarray.flatten(NumpyLib.NPY_ORDER)">
            <summary>
            Return a copy of the array collapsed into one dimension.
            </summary>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.item_byindex(System.Int32[])">
            <summary>
            This function will allow specifying index with an array.
            Instead of specifying and item like a[1,2,3] can use a[new int[] {1,2,3}];
            </summary>
            <param name="args">an array with index values to select specific items</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.item_byindex(System.Int64[])">
            <summary>
            This function will allow specifying index with an array.
            Instead of specifying and item like a[1,2,3] can use a[new int[] {1,2,3}];
            </summary>
            <param name="args">an array with index values to select specific items</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.item(System.Object[])">
            <summary>
            This function will allow specifying items via collection of index types.
            </summary>
            <param name="args">a collection if index items</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.itemset(System.Object[])">
            <summary>
            This function will allow specifying items via collection of index types.
            </summary>
            <param name="args">a collection if index items</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.newbyteorder(System.String)">
            <summary>
            Return the array with the same data viewed with a different byte order.
            </summary>
            <param name="new_order"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.put(System.Object,System.Object,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Replaces specified elements of an array with given values.
            </summary>
            <param name="indices">Target indices, interpreted as integers.</param>
            <param name="values">Values to place in a at target indices. </param>
            <param name="mode">{‘raise’, ‘wrap’, ‘clip’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.ravel(NumpyLib.NPY_ORDER)">
            <summary>
            Return a flattened array.
            </summary>
            <param name="order">{‘C’,’F’, ‘A’, ‘K’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.reshape(System.Collections.Generic.IEnumerable{System.Int64},NumpyLib.NPY_ORDER)">
            <summary>
            Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape.</param>
            <param name="order">{‘C’, ‘F’, ‘A’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.reshape(System.Int32,NumpyLib.NPY_ORDER)">
            <summary>
            Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape.</param>
            <param name="order">{‘C’, ‘F’, ‘A’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.setflags(System.Object,System.Object,System.Object)">
            <summary>
            Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY), respectively.
            </summary>
            <param name="write"></param>
            <param name="align"></param>
            <param name="uic"></param>
        </member>
        <member name="M:NumpyDotNet.ndarray.tobytes(NumpyLib.NPY_ORDER)">
            <summary>
            copies array data into byte[].  Can change the ordering.
            </summary>
            <param name="order">{‘C’, ‘F’, ‘A’}, optional</param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.ndarray.Size">
            <summary>
            Number of elements in the array.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.Real">
            <summary>
            Return the real part of the complex argument.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.Imag">
            <summary>
            Return the imaginary part of the complex argument.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.ToString">
            <summary>
            returns printable string representation of ndarray
            </summary>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.ndarray.Flat">
            <summary>
            A 1-D iterator over the array.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.GetItem(System.Int64)">
            <summary>
            Directly accesses the array memory and returns the object at that
            offset.  No checks are made, caller can easily crash the program
            or retrieve garbage data.
            </summary>
            <param name="offset">Offset into data array in bytes</param>
            <returns>Contents of the location</returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.SetItem(System.Object,System.Int64)">
            <summary>
            Directly sets a given location in the data array.  No checks are
            made to make sure the offset is sensible or the data is valid in
            anyway -- caller beware.
            'internal' because this is a security vulnerability.
            </summary>
            <param name="src">Value to write</param>
            <param name="offset">Offset into array in bytes</param>
        </member>
        <member name="P:NumpyDotNet.ndarray.Array">
            <summary>
            Handle to the core representation.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.DataAddress">
            <summary>
            Base address of the array data memory. Use with caution.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.dims">
            <summary>
            Returns an array of the sizes of each dimension. This property allocates
            a new array with each call and must make a managed-to-native call so it's
            worth caching the results if used in a loop.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.strides">
            <summary>
            the strides of the array.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.Dim(System.Int32)">
            <summary>
            Returns the stride of a given dimension. For looping over all dimensions,
            use 'strides'.  This is more efficient if only one dimension is of interest.
            </summary>
            <param name="dimension">Dimension to query</param>
            <returns>Data stride in bytes</returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.Stride(System.Int32)">
            <summary>
            Returns the stride of a given dimension. For looping over all dimensions,
            use 'strides'.  This is more efficient if only one dimension is of interest.
            </summary>
            <param name="dimension">Dimension to query</param>
            <returns>Data stride in bytes</returns>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsContiguous">
            <summary>
            True if memory layout of array is contiguous
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsASlice">
            <summary>
            true of array is a slice/view into another array.
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsAScalar">
            <summary>
            true if array is a single element array
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsFortran">
            <summary>
            True if memory layout is Fortran order, false implies C order
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsNotSwapped">
            <summary>
            true of byte order is not swapped
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsByteSwapped">
            <summary>
            true if byte order is swapped
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsCArray">
            <summary>
            true of array is ordered in "C" format
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsCArray_RO">
            <summary>
            true if array is ordered in "C" formation and Read Only
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsFArray">
            <summary>
            returns true of array is ordered in "F"ortran order
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsFArray_RO">
            <summary>
            returns true of array is ordered in "F"ortran order and Read Only
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsBehaved">
            <summary>
            returns true of data type is aligned, writable and machine byte-order
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsBehaved_RO">
            <summary>
            returns true of data type is aligned and machine byte-order
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsBool">
            <summary>
            return true if data type is a complex number
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsComplex">
            <summary>
            return true if data type is a complex number
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsBigInt">
            <summary>
            returns true if data type is a "BigInteger"
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsDecimal">
            <summary>
            returns true if data type is Decimal
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsInteger">
            <summary>
            returns true if data type is an integer value
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsSignedInteger">
            <summary>
            returns true if data type is a signed integer value
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsUnsignedInteger">
            <summary>
            returns true if data type is a signed integer value
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsFloatingPoint">
            <summary>
            returns true if data type is a floating point value
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsNumber">
            <summary>
            returns true if data type is numeric value
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsInexact">
            <summary>
            returns true if data type is inexact (i.e. floating point or complex)
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsFlexible">
            <summary>
            returns true of data type is string
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsMathFunctionCapable">
            <summary>
            returns true of internal math functions can be operated on the data type
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsMatrix">
            <summary>
            always false since matrix types obsolete and not supported
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsWriteable">
            <summary>
            true if array is not Read Only
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.IsString">
            <summary>
            return true if data type is a string
            </summary>
        </member>
        <member name="P:NumpyDotNet.ndarray.ElementStrides">
            <summary>
            TODO: What does this return?
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndarray.ChkFlags(NumpyLib.NPYARRAYFLAGS)">
            <summary>
            check for ndarray flag == true
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.ndarray.GetArrayItem(System.Int64)">
            <summary>
            Indexes an array by a single long and returns either an item or a sub-array.
            </summary>
            <param name="index">The index into the array</param>
        </member>
        <member name="M:NumpyDotNet.ndarray.SetArrayItem(System.Int64,System.Object)">
            <summary>
            Indexes an array by a single long and returns either an item or a sub-array.
            </summary>
            <param name="index">The index into the array</param>
        </member>
        <member name="M:NumpyDotNet.dtype.#ctor(NumpyDotNet.dtype)">
            <summary>
            Constructs a new NpyArray_Descr objet matching the passed one.
            Equivalent to NpyAray_DescrNew.
            </summary>
            <param name="d">Descriptor to duplicate</param>
        </member>
        <member name="M:NumpyDotNet.dtype.#ctor(NumpyLib.NpyArray_Descr)">
            <summary>
            Creates a wrapper for an array created on the native side, such as
            the result of a slice operation.
            </summary>
            <param name="d">Pointer to core NpyArray_Descr structure</param>
        </member>
        <member name="P:NumpyDotNet.dtype.name">
            <summary>
            Returns the name of the underlying data type such as 'int32' or 'object'.
            </summary>
        </member>
        <member name="P:NumpyDotNet.dtype.shape">
            <summary>
            A tuple describing the size of each dimension of the array.
            </summary>
        </member>
        <member name="M:NumpyDotNet.dtype.op_Equality(NumpyDotNet.dtype,NumpyDotNet.dtype)">
            <summary>
            Compares two types and returns true if they are equivalent,
            including complex types, even if represented by two different
            underlying descriptor objects.
            </summary>
            <param name="t1">Type 1</param>
            <param name="t2">Type 2</param>
            <returns>True if types are equivalent</returns>
        </member>
        <member name="F:NumpyDotNet.dtype.funcs">
            <summary>
            Type-specific functions
            </summary>
        </member>
        <member name="M:NumpyDotNet.DumpData.DumpArray(NumpyLib.NpyArray,System.Collections.Generic.List{System.String},System.Int64[],System.Int64[],System.Int32,System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Recursively walks the array and appends a representation of each element
            to the passed string builder.  Square brackets delimit each array dimension.
            </summary>
            <param name="sb">StringBuilder instance to append to</param>
            <param name="dimensions">Array of size of each dimension</param>
            <param name="strides">Offset in bytes to reach next element in each dimension</param>
            <param name="dimIdx">Index of the current dimension (starts at 0, recursively counts up)</param>
            <param name="offset">Byte offset into data array, starts at 0</param>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.reshape(NumpyDotNet.ndarray,System.Int32[])">
            <summary>
            Returns an array containing the same data with a new shape.
            </summary>
            <param name="a">array to reshape</param>
            <param name="newshape">New shape for the array. The new shape should be compatible with the original shape</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.reshape(NumpyDotNet.ndarray,System.Int64[])">
            <summary>
            Returns an array containing the same data with a new shape.
            </summary>
            <param name="a">array to reshape</param>
            <param name="newshape">New shape for the array. The new shape should be compatible with the original shape</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.reshape(NumpyDotNet.ndarray,NumpyDotNet.shape,NumpyLib.NPY_ORDER)">
            <summary>
            Returns an array containing the same data with a new shape.
            </summary>
            <param name="a">array to reshape</param>
            <param name="newshape">New shape for the array. The new shape should be compatible with the original shape</param>
            <param name="order">{‘C’, ‘F’, ‘A’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.reshape(NumpyDotNet.ndarray,System.Object,NumpyLib.NPY_ORDER)">
            <summary>
            Returns an array containing the same data with a new shape.
            </summary>
            <param name="a">array to reshape</param>
            <param name="newshape">New shape for the array. The new shape should be compatible with the original shape</param>
            <param name="order">{‘C’, ‘F’, ‘A’}, optional</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.tofile(NumpyDotNet.ndarray,System.String,System.String,System.String)">
            <summary>
            Write array to a file as text or binary (default).
            </summary>
            <param name="a">array to write to file</param>
            <param name="fileName">string containing a filename</param>
            <param name="sep">Separator between array items for text output.</param>
            <param name="format">Format string for text file output.</param>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.tofile(NumpyDotNet.ndarray,System.IO.Stream,System.String,System.String)">
            <summary>
            Write array to a stream as text or binary (default).
            </summary>
            <param name="a">array to write to stream</param>
            <param name="stream">stream to write to</param>
            <param name="sep">Separator between array items for text output.</param>
            <param name="format">Format string for text file output.</param>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.view(NumpyDotNet.ndarray,NumpyDotNet.dtype,System.Object)">
            <summary>
            New view of array with the same data.
            </summary>
            <param name="a"></param>
            <param name="dtype">Data-type descriptor of the returned view</param>
            <param name="type">Type of the returned view, e.g., ndarray or matrix (not used)</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Flatten(NumpyDotNet.ndarray,NumpyLib.NPY_ORDER)">
            <summary>
            Return a copy of the array collapsed into one dimension.
            </summary>
            <param name="a">array to flatten</param>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Ravel(NumpyDotNet.ndarray,NumpyLib.NPY_ORDER)">
            <summary>
            Return a contiguous flattened array.
            </summary>
            <param name="a">array to flatten</param>
            <param name="order">{‘C’, ‘F’, ‘A’, ‘K’}</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Resize(NumpyDotNet.ndarray,System.Int64[])">
            <summary>
            Change shape and size of array in-place.
            </summary>
            <param name="a"></param>
            <param name="newdims">Shape of resized array.</param>
            <param name="order"></param>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Squeeze(NumpyDotNet.ndarray)">
            <summary>
            Remove axes of length one from a.
            </summary>
            <param name="a">array to squeeze</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.SwapAxes(NumpyDotNet.ndarray,System.Int32,System.Int32)">
            <summary>
            Interchange two axes of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis1">First axis.</param>
            <param name="axis2">Second axis.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Transpose(NumpyDotNet.ndarray,System.Int64[])">
            <summary>
            Returns a view of the array with axes transposed.
            </summary>
            <param name="a">array to transpose</param>
            <param name="axes">array of npy_intp: i in the j-th place in the array means a’s i-th axis becomes a.transpose()’s j-th axis</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Choose(NumpyDotNet.ndarray,System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray},NumpyDotNet.ndarray,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Construct an array from an index array and a set of arrays to choose from.
            </summary>
            <param name="a">array to perform choose operation on.</param>
            <param name="choices">Choice arrays. a and all of the choices must be broadcastable to the same shape</param>
            <param name="out">f provided, the result will be inserted into this array</param>
            <param name="clipMode">{‘raise’ (default), ‘wrap’, ‘clip’}</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Repeat(NumpyDotNet.ndarray,System.Object,System.Nullable{System.Int32})">
            <summary>
            Repeat elements of an array.
            </summary>
            <param name="a"></param>
            <param name="repeats">The number of repetitions for each element</param>
            <param name="axis">The axis along which to repeat values</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.PutTo(NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyLib.NPY_CLIPMODE)">
            <summary>
            Replaces specified elements of an array with given values.
            </summary>
            <param name="a">target ndarray</param>
            <param name="values">Values to place in a at target indices</param>
            <param name="ind">Target indices, interpreted as integers.</param>
            <param name="mode">{‘raise’, ‘wrap’, ‘clip’}</param>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Sort(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyLib.NPY_SORTKIND)">
            <summary>
            Sort an array in-place.
            </summary>
            <param name="a">array to sort</param>
            <param name="axis">Axis along which to sort. Default is -1, which means sort along the last axis.</param>
            <param name="sortkind">Sorting algorithm. The default is ‘quicksort’.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.ArgSort(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyLib.NPY_SORTKIND)">
            <summary>
            Returns the indices that would sort an array.
            </summary>
            <param name="a">array to sort</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Sorting algorithm. The default is ‘quicksort’.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.ArgMax(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Returns the indices of the maximum values along an axis.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <param name="ret">If provided, the result will be inserted into this array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.ArgMin(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Returns the indices of the minimum values along an axis.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <param name="ret">If provided, the result will be inserted into this array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.SearchSorted(NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyLib.NPY_SEARCHSIDE)">
            <summary>
            Find indices where elements of v should be inserted in a to maintain order.
            </summary>
            <param name="a">Input array 1-D</param>
            <param name="v">Values to insert into a.</param>
            <param name="side">{‘left’, ‘right’}</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.diagonal(NumpyDotNet.ndarray,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return specified diagonals.
            </summary>
            <param name="a">Array from which the diagonals are taken.</param>
            <param name="offset">Offset of the diagonal from the main diagonal</param>
            <param name="axis1">Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <param name="axis2">Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.trace(NumpyDotNet.ndarray,System.Int32,System.Int32,System.Int32,NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the sum along diagonals of the array.
            </summary>
            <param name="a">Input array, from which the diagonals are taken.</param>
            <param name="offset">Offset of the diagonal from the main diagonal</param>
            <param name="axis1">Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken</param>
            <param name="axis2">Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken.</param>
            <param name="dtype">Determines the data-type of the returned array and of the accumulator where the elements are summed.</param>
            <param name="ret">Array into which the output is placed</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.NonZero(NumpyDotNet.ndarray)">
            <summary>
            Return the indices of the elements that are non-zero.
            </summary>
            <param name="a">Input array.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.compress(NumpyDotNet.ndarray,System.Object,System.Object,NumpyDotNet.ndarray)">
            <summary>
            Return selected slices of an array along given axis.
            </summary>
            <param name="a">Array from which to extract a part.</param>
            <param name="condition">Array that selects which entries to return. If len(condition) is less than the size of a along the given axis, then output is truncated to the length of the condition array.</param>
            <param name="axis">Axis along which to take slices. If None (default), work on the flattened array.</param>
            <param name="out">Output array. Its type is preserved and it must be of the right shape to hold the output.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.compress(NumpyDotNet.ndarray,NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray)">
            <summary>
            Return selected slices of an array along given axis.
            </summary>
            <param name="a">Array from which to extract a part.</param>
            <param name="condition">Array that selects which entries to return. If len(condition) is less than the size of a along the given axis, then output is truncated to the length of the condition array.</param>
            <param name="axis">Axis along which to take slices. If None (default), work on the flattened array.</param>
            <param name="out">Output array. Its type is preserved and it must be of the right shape to hold the output.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.clip(NumpyDotNet.ndarray,System.Object,System.Object,NumpyDotNet.ndarray)">
            <summary>
            Clip (limit) the values in an array.
            </summary>
            <param name="a">Array containing elements to clip.</param>
            <param name="a_min">Minimum value</param>
            <param name="a_max">maximum value</param>
            <param name="ret">The results will be placed in this array</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Sum(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed. </param>
            <param name="ret">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Any(NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Test whether any array element along a given axis evaluates to True.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">Axis or axes along which a logical OR reduction is performed</param>
            <param name="out">Alternate output array in which to place the result</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Anyb(NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            return bool result from np.any
            </summary>
            <param name="a">Input array</param>
            <param name="axis">Axis or axes along which a logical OR reduction is performed</param>
            <param name="out">Alternate output array in which to place the result</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.All(NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Test whether all array elements along a given axis evaluate to True.
            </summary>
            <param name="a">Input array </param>
            <param name="axis">Axis or axes along which a logical AND reduction is performed</param>
            <param name="out">Alternate output array in which to place the result</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.cumsum(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative sum of the elements along a given axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">Axis along which the cumulative sum is computed. </param>
            <param name="dtype">Type of the returned array and of the accumulator in which the elements are summed.</param>
            <param name="ret">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.ptp(NumpyDotNet.ndarray,System.Object,NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Range of values (maximum - minimum) along an axis.
            </summary>
            <param name="a">Input values.</param>
            <param name="axis">Axis along which to find the peaks.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AMax(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AMin(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="out">Alternative output array in which to place the result.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Prod(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the product of array elements over a given axis.
            </summary>
            <param name="a">Input data</param>
            <param name="axis">Axis or axes along which a product is performed. </param>
            <param name="dtype">The type of the returned array, as well as of the accumulator in which the elements are multiplied.</param>
            <param name="ret">Alternative output array in which to place the result.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.CumProd(NumpyDotNet.ndarray,System.Int32,NumpyDotNet.dtype,NumpyDotNet.ndarray)">
            <summary>
            Return the cumulative product of elements along a given axis.
            </summary>
            <param name="a">Input array</param>
            <param name="axis">Axis along which the cumulative product is computed.</param>
            <param name="dtype">Type of the returned array, as well as of the accumulator in which the elements are multiplied.</param>
            <param name="ret">Alternative output array in which to place the result</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Mean(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype)">
            <summary>
            Compute the arithmetic mean along the specified axis.
            </summary>
            <param name="a">Array containing numbers whose mean is desired.</param>
            <param name="axis">Axis or axes along which the means are computed.</param>
            <param name="dtype">Type to use in computing the mean. </param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Std(NumpyDotNet.ndarray,System.Nullable{System.Int32},NumpyDotNet.dtype)">
            <summary>
            Compute the standard deviation along the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed.</param>
            <param name="dtype">Type to use in computing the standard deviation.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.partition(NumpyDotNet.ndarray,System.Int64[],System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return a partitioned copy of an array.
            </summary>
            <param name="a">Array to be sorted.</param>
            <param name="kth">Element index to partition by</param>
            <param name="axis">Axis along which to sort.</param>
            <param name="kind">Selection algorithm</param>
            <param name="order">When a is an array with fields defined, this argument specifies which fields to compare first, second, etc.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NumpyDotNet.NumpyExtensions.ToList``1(NumpyDotNet.ndarray)" -->
        <member name="M:NumpyDotNet.NumpyExtensions.ToArray(NumpyDotNet.ndarray)">
            <summary>
            Converts ndarray data items into a raw data array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.ToSystemArray(NumpyDotNet.ndarray)">
            <summary>
            Converts ndarray data items into a raw data array
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Mean``1(NumpyDotNet.ndarray)">
            <summary>
            Compute the arithmetic mean
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Mean``1(System.Collections.Generic.IList{``0})">
            <summary>
            Compute the arithmetic mean
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Mean``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Compute the arithmetic mean
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Variance``1(NumpyDotNet.ndarray)">
            <summary>
            Compute the variance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Variance``1(System.Collections.Generic.IList{``0})">
            <summary>
            Compute the variance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Variance``1(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Compute the variance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.Variance``1(System.Collections.Generic.IList{``0},System.Double,System.Int32,System.Int32)">
            <summary>
            Compute the variance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.StandardDeviation``1(NumpyDotNet.ndarray)">
            <summary>
            Compute the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.StandardDeviation``1(System.Collections.Generic.IList{``0})">
            <summary>
            Compute the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.StandardDeviation``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Compute the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsBoolArray(NumpyDotNet.ndarray)">
            <summary>
            Returns bool array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsSByteArray(NumpyDotNet.ndarray)">
            <summary>
            Returns sbyte array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsByteArray(NumpyDotNet.ndarray)">
            <summary>
            Returns byte array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsInt16Array(NumpyDotNet.ndarray)">
            <summary>
            Returns Int16 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsUInt16Array(NumpyDotNet.ndarray)">
            <summary>
            Returns UInt16 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsInt32Array(NumpyDotNet.ndarray)">
            <summary>
            Returns Int32 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsUInt32Array(NumpyDotNet.ndarray)">
            <summary>
            Returns UInt32 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsInt64Array(NumpyDotNet.ndarray)">
            <summary>
            Returns Int64 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsUInt64Array(NumpyDotNet.ndarray)">
            <summary>
            Returns UInt64 array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsFloatArray(NumpyDotNet.ndarray)">
            <summary>
            Returns float array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsDoubleArray(NumpyDotNet.ndarray)">
            <summary>
            Returns double array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsDecimalArray(NumpyDotNet.ndarray)">
            <summary>
            Returns decimal array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsComplexArray(NumpyDotNet.ndarray)">
            <summary>
            Returns Complex array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsBigIntArray(NumpyDotNet.ndarray)">
            <summary>
            Returns BigInt array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsObjectArray(NumpyDotNet.ndarray)">
            <summary>
            Returns Object array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NumpyExtensions.AsStringArray(NumpyDotNet.ndarray)">
            <summary>
            Returns String array.  Converts if necessary
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.fv(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="rate">Rate of interest as decimal (not per cent) per period</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="when">When payments are due</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pmt(System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal plus interest.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">uture value (default = 0)</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pmt(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal plus interest.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">uture value (default = 0)</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pmt(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal plus interest.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">uture value (default = 0)</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.nper(System.Object,System.Object,System.Object)">
            <summary>
            Compute the number of periodic payments.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.nper(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the number of periodic payments.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.nper(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the number of periodic payments.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.ipmt(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the interest portion of a payment.
            </summary>
            <param name="rate">Rate of interest as decimal (not per cent) per period</param>
            <param name="per">Interest paid against the loan changes during the life or the loan. The 'per' is the payment period to calculate the interest amount.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.ipmt(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the interest portion of a payment.
            </summary>
            <param name="rate">Rate of interest as decimal (not per cent) per period</param>
            <param name="per">Interest paid against the loan changes during the life or the loan. The 'per' is the payment period to calculate the interest amount.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.ipmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the interest portion of a payment.
            </summary>
            <param name="rate">Rate of interest as decimal (not per cent) per period</param>
            <param name="per">Interest paid against the loan changes during the life or the loan. The 'per' is the payment period to calculate the interest amount.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.ppmt(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="per">Amount paid against the loan changes.  The `per` is the period of interest.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>       
        </member>
        <member name="M:NumpyDotNet.npf.ppmt(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="per">Amount paid against the loan changes.  The `per` is the period of interest.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>      
        </member>
        <member name="M:NumpyDotNet.npf.ppmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the payment against loan principal.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="per">Amount paid against the loan changes.  The `per` is the period of interest.</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pv(System.Object,System.Object,System.Object)">
            <summary>
            Compute the present value.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pv(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the present value.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.pv(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the present value.
            </summary>
            <param name="rate">Rate of interest (per period)</param>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.rate(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the rate of interest per period.
            </summary>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <param name="guess">Starting guess for solving the rate of interest, default 0.1</param>
            <param name="tol">Required tolerance for the solution, default 1e-6</param>
            <param name="maxiter">Maximum iterations in finding the solution</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.rate(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compute the rate of interest per period.
            </summary>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <param name="guess">Starting guess for solving the rate of interest, default 0.1</param>
            <param name="tol">Required tolerance for the solution, default 1e-6</param>
            <param name="maxiter">Maximum iterations in finding the solution</param>
            <returns></returns>       
        </member>
        <member name="M:NumpyDotNet.npf.rate(System.Object,System.Object,System.Object,System.Object,System.Object,System.Double)">
            <summary>
            Compute the rate of interest per period.
            </summary>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <param name="guess">Starting guess for solving the rate of interest, default 0.1</param>
            <param name="tol">Required tolerance for the solution, default 1e-6</param>
            <param name="maxiter">Maximum iterations in finding the solution</param>
            <returns></returns>     
        </member>
        <member name="M:NumpyDotNet.npf.rate(System.Object,System.Object,System.Object,System.Object,System.Object,System.Double,System.Double)">
            <summary>
            Compute the rate of interest per period.
            </summary>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <param name="guess">Starting guess for solving the rate of interest, default 0.1</param>
            <param name="tol">Required tolerance for the solution, default 1e-6</param>
            <param name="maxiter">Maximum iterations in finding the solution</param>
            <returns></returns>      
        </member>
        <member name="M:NumpyDotNet.npf.rate(System.Object,System.Object,System.Object,System.Object,System.Object,System.Double,System.Double,System.Int32)">
            <summary>
            Compute the rate of interest per period.
            </summary>
            <param name="nper">Number of compounding periods</param>
            <param name="pmt">Payment</param>
            <param name="pv">Present value</param>
            <param name="fv">Future value</param>
            <param name="when">When payments are due ('begin' (1) or 'end' (0))</param>
            <param name="guess">Starting guess for solving the rate of interest, default 0.1</param>
            <param name="tol">Required tolerance for the solution, default 1e-6</param>
            <param name="maxiter">Maximum iterations in finding the solution</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.irr(System.Object)">
            <summary>
            Return the Internal Rate of Return (IRR).
            </summary>
            <param name="values">Input cash flows per time period.</param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.npf.npv(System.Object,System.Object)">
            <summary>
            Returns the NPV (Net Present Value) of a cash flow series.
            </summary>
            <param name="rate">The discount rate.</param>
            <param name="values">The values of the time series of cash flows.</param>
            <returns>The NPV of the input cash flow series `values` at the discount `rate`.</returns>
        </member>
        <member name="M:NumpyDotNet.npf.mirr(System.Object,System.Object,System.Object)">
            <summary>
            Modified internal rate of return.
            </summary>
            <param name="values">Cash flows (must contain at least one positive and one negative value) or nan is returned.</param>
            <param name="finance_rate">Interest rate paid on the cash flows</param>
            <param name="reinvest_rate">Interest rate received on the cash flows upon reinvestment</param>
            <returns>Modified internal rate of return</returns>
        </member>
        <member name="M:NumpyDotNet.flatiter.FlatView(System.Object)">
            <summary>
            Returns a contiguous, 1-d array that can be used to update the underlying array.  If the array
            is contiguous this is a 1-d view of the array.  Otherwise it is a copy with UPDATEIFCOPY set so that
            the data will be copied back when the returned array is freed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NumpyDotNet.TupleEnumerator">
            <summary>
            public class to get optimized
            </summary>
        </member>
        <member name="T:NumpyDotNet.nditer">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.nditer.#ctor(NumpyDotNet.ndarray)">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.nditer.#ctor(System.ValueTuple{NumpyDotNet.ndarray,NumpyDotNet.ndarray})">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.nditer.#ctor(System.ValueTuple{NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray})">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.nditer.#ctor(System.ValueTuple{NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray,NumpyDotNet.ndarray})">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.nditer.#ctor(NumpyDotNet.ndarray[])">
            <summary>
            Efficient multi-dimensional iterator object to iterate over arrays.
            </summary>
        </member>
        <member name="T:NumpyDotNet.ndindex">
            <summary>
            An N-dimensional iterator object to index arrays.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndindex.#ctor(System.Object)">
            <summary>
            An N-dimensional iterator object to index arrays.
            </summary>
        </member>
        <member name="T:NumpyDotNet.ndenumerate">
            <summary>
            Multidimensional index iterator.
            </summary>
        </member>
        <member name="M:NumpyDotNet.ndenumerate.#ctor(NumpyDotNet.ndarray)">
            <summary>
            Multidimensional index iterator.
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:NumpyDotNet.NpyCoreApi">
             <summary>
             NpyCoreApi class wraps the interactions with the libndarray core library. It
             also makes use of NpyAccessLib.dll for a few functions that must be
             implemented in native code.
            
             TODO: This class is going to get very large.  Not sure if it's better to
             try to break it up or just use partial classes and split it across
             multiple files.
             </summary>
        </member>
        <member name="T:NumpyDotNet.NpyCoreApi.UseExistingWrapper">
            <summary>
            Stupid hack to allow us to pass an already-allocated wrapper instance
            through the interfaceData argument and tell the wrapper creation functions
            like ArrayNewWrapper to use an existing instance instead of creating a new
            one.  This is necessary because CPython does construction as an allocator
            but .NET only triggers code after allocation.
            </summary>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.DescrFromType(NumpyLib.NPY_TYPES)">
            <summary>
            Returns a new descriptor object for internal types or user defined
            types.
            </summary>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.MoveInto(NumpyDotNet.ndarray,NumpyDotNet.ndarray)">
            <summary>
            Moves the contents of src into dest.  Arrays are assumed to have the
            same number of elements, but can be different sizes and different types.
            </summary>
            <param name="dest">Destination array</param>
            <param name="src">Source array</param>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.Combine(NumpyDotNet.ndarray,NumpyDotNet.ndarray)">
            <summary>
            combines two ndarrays together
            </summary>
            <param name="dest"></param>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.CombineInto(NumpyDotNet.ndarray,System.Collections.Generic.IEnumerable{NumpyDotNet.ndarray})">
            <summary>
            appends multiple ndarrays together
            </summary>
            <param name="dest"></param>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.AllocArray(NumpyDotNet.dtype,System.Int32,System.Int64[],System.Boolean)">
            <summary>
            Allocates a new array and returns the ndarray wrapper
            </summary>
            <param name="descr">Type descriptor</param>
            <param name="numdim">Num of dimensions</param>
            <param name="dimensions">Size of each dimension</param>
            <param name="fortran">True if Fortran layout, false for C layout</param>
            <returns>Newly allocated array</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.FromArray(NumpyDotNet.ndarray,NumpyDotNet.dtype,NumpyLib.NPYARRAYFLAGS)">
            <summary>
            Constructs a new array from an input array and descriptor type.  The
            Underlying array may or may not be copied depending on the requirements.
            </summary>
            <param name="src">Source array</param>
            <param name="descr">Desired type</param>
            <param name="flags">New array flags</param>
            <returns>New array (may be source array)</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.GetArrayDimsOrStrides(NumpyDotNet.ndarray,System.Boolean)">
            <summary>
            Returns an array with the size or stride of each dimension in the given array.
            </summary>
            <param name="arr">The array</param>
            <param name="getDims">True returns size of each dimension, false returns stride of each dimension</param>
            <returns>Array w/ an array size or stride for each dimension</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.SetArrayDimsOrStrides(NumpyDotNet.ndarray,System.Int64[],System.Int32,System.Boolean)">
            <summary>
            sets an array with the size or stride of each dimension in the given array.
            </summary>
            <param name="arr">The array</param>
            <param name="setDims">True returns size of each dimension, false returns stride of each dimension</param>
            <returns>Array w/ an array size or stride for each dimension</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.MultiIterFromObjects(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a multiterator
            </summary>
            <param name="objs">Sequence of objects to iterate over</param>
            <returns>Pointer to core multi-iterator structure</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.NewCopy(NumpyDotNet.ndarray,NumpyLib.NPY_ORDER)">
            <summary>
            Returns a copy of the passed array in the specified order (C, Fortran)
            </summary>
            <param name="arr">Array to copy</param>
            <param name="order">Desired order</param>
            <returns>New array</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.Fill(NumpyDotNet.ndarray)">
            <summary>
            Calls the fill function on the array dtype.  This takes the first 2 values in the array and fills the array
            so the difference between each pair of elements is the same.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.ArrayFromFile(System.String,NumpyDotNet.dtype,System.Int32,System.String)">
            <summary>
            Reads the specified text or binary file and produces an array from the content.  Currently only
            the file name is allowed and not a PythonFile or Stream type due to limitations in the core
            (assumes FILE *).
            </summary>
            <param name="fileName">File to read</param>
            <param name="type">Type descriptor for the resulting array</param>
            <param name="count">Number of elements to read, less than zero reads all available</param>
            <param name="sep">Element separator string for text files, null for binary files</param>
            <returns>Array of file contents</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.ArrayFromStream(System.IO.Stream,NumpyDotNet.dtype,System.Int32,System.String)">
            <summary>
            Reads the specified text or binary file and produces an array from the content.  Currently only
            the file name is allowed and not a PythonFile or Stream type due to limitations in the core
            (assumes FILE *).
            </summary>
            <param name="fileStream">File to read</param>
            <param name="type">Type descriptor for the resulting array</param>
            <param name="count">Number of elements to read, less than zero reads all available</param>
            <param name="sep">Element separator string for text files, null for binary files</param>
            <returns>Array of file contents</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.ArrayToFile(NumpyDotNet.ndarray,System.String,System.String,System.String)">
            <summary>
            writes the array contents to the specified file name
            </summary>
            <param name="arr">array with data to write to file</param>
            <param name="fileName">file name to write to</param>
            <param name="sep">Element separator string for text files, null for binary files</param>
            <param name="format">.NET format string to use for writing values</param>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.ArrayToStream(NumpyDotNet.ndarray,System.IO.Stream,System.String,System.String)">
            <summary>
            writes the array contents to the specified file name
            </summary>
            <param name="arr">array with data to write to file</param>
            <param name="fileStream">file stream to write to</param>
            <param name="sep">Element separator string for text files, null for binary files</param>
            <param name="format">.NET format string to use for writing values</param>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.ArrayItem(NumpyDotNet.ndarray,System.Int64)">
            <summary>
            Indexes an array by a single long and returns the sub-array.
            </summary>
            <param name="index">The index into the array.</param>
            <returns>The sub-array.</returns>
        </member>
        <member name="M:NumpyDotNet.NpyCoreApi.NpyDict_Next(NumpyLib.NpyDict,NumpyLib.NpyDict_Iter,NumpyLib.NpyDict_KVPair)">
            <summary>
            Accesses the next dictionary item, returning the key and value.  Thread-safe when operating across
            separate iterators; caller must ensure that one iterator is not access simultaneously from two
            different threads.
            </summary>
            <param name="dict">Pointer to the dictionary object</param>
            <param name="iter">Iterator structure</param>
            <param name="key">Next key</param>
            <param name="value">Next value</param>
            <returns>True if an element was returned, false at the end of the sequence</returns>
        </member>
        <member name="F:NumpyDotNet.NpyCoreApi._ErrorCode">
            <summary>
            Indicates the most recent error code or NpyExc_NoError if nothing pending
            </summary>
        </member>
        <member name="F:NumpyDotNet.NpyCoreApi.ErrorMessage">
            <summary>
            Stores the most recent error message per-thread
            </summary>
        </member>
        <member name="P:NumpyDotNet.NpyIndexes.IsSimple">
            <summary>
            Whether or not this is a simple (not fancy) index.
            </summary>
        </member>
        <member name="P:NumpyDotNet.NpyIndexes.IsMultiField">
            <summary>
            Returns true if this index is all strings accessing fields in the array.
            </summary>
        </member>
        <member name="M:NumpyDotNet.NpyIndexes.IsSingleItem(System.Int32)">
            <summary>
            Returns whether or not this index is a single item index for an array on size ndims.
            </summary>
        </member>
        <member name="M:NumpyDotNet.NpyIndexes.SingleAssignOffset(NumpyDotNet.ndarray)">
            <summary>
            Finds the offset for a single item assignment to the array.
            </summary>
            <param name="arr">The array we are assigning to.</param>
            <returns>The offset or -1 if this is not a single assignment.</returns>
        </member>
        <member name="M:NumpyDotNet.NpyUtil_IndexProcessing.SequenceTuple(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Determines whether or not to treat the sequence as multiple indexes
            We do this unless it looks like a sequence of indexes.
            </summary>
        </member>
        <member name="F:NumpyDotNet.rk_state.has_binomial">
            * The rk_state structure has been extended to store the following
        </member>
        <member name="P:NumpyDotNet.shape.Item(System.Int64)">
            <summary>
            get shape index by position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.shape.Item(System.String)">
            <summary>
            get shape indices by slice string
            </summary>
            <param name="slice"></param>
            <returns></returns>
        </member>
        <member name="P:NumpyDotNet.shape.Item(NumpyDotNet.Slice)">
            <summary>
            get shape indices via slice
            </summary>
            <param name="slice"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.shape.Equals(System.Object)">
            <summary>
            returns true of the shapes are equivalent
            </summary>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(NumpyDotNet.ndarray)">
            <summary>
            convert an ndarray of integers into a shape
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor">
            <summary>
            default constructor needed for serialization
            </summary>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            convert a collection of Int32 values into a shape
            </summary>
            <param name="dim"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            add two arrays into one and create a shape with results
            </summary>
            <param name="dim"></param>
            <param name="dim2"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            add three arrays into one and create a shape with results
            </summary>
            <param name="dim"></param>
            <param name="dim2"></param>
            <param name="dim3"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            convert a collection of Int64 values into a shape
            </summary>
            <param name="dim"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            add two arrays into one and create a shape with results
            </summary>
            <param name="dim"></param>
            <param name="dim2"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            add three arrays into one and create a shape with results
            </summary>
            <param name="dim"></param>
            <param name="dim2"></param>
            <param name="dim3"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int64[],System.Int32)">
            <summary>
            convert an array of npy_intp into a shape
            </summary>
            <param name="dim"></param>
            <param name="nd"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(NumpyDotNet.shape)">
            <summary>
            create a new shape, copied from existing shape
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int32)">
            <summary>
            create a 1D shape
            </summary>
            <param name="Dim1"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int64)">
            <summary>
            create a 1D shape
            </summary>
            <param name="Dim1"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int32,System.Int32)">
            <summary>
            create a 2D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int64,System.Int64)">
            <summary>
            create a 2D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            create a 3D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
            <param name="Dim3"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            create a 3D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
            <param name="Dim3"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            create a 4D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
            <param name="Dim3"></param>
            <param name="Dim4"></param>
        </member>
        <member name="M:NumpyDotNet.shape.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            create a 4D shape
            </summary>
            <param name="Dim1"></param>
            <param name="Dim2"></param>
            <param name="Dim3"></param>
            <param name="Dim4"></param>
        </member>
        <member name="M:NumpyDotNet.shape.ToString">
            <summary>
            return a string representation of this shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumpyDotNet.shape.op_Addition(NumpyDotNet.shape,NumpyDotNet.shape)">
            <summary>
            add two shapes together
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:MachineCognitus.math">
            <summary>
            Implements several <a href="http://en.cppreference.com/w/c/numeric/math">C Standard</a> mathematical functions that are missing from the .NET framework.
            </summary>
            <remarks>
            <para>
            Both double and single precision functions are implemented.
            All functions are static and their names follow the <a href="http://en.cppreference.com/w/c/numeric/math">C Standard</a>.
            The class is named after the C header file where the functions are declared.
            </para>
            </remarks>
            <author email="robert.baron@videotron.ca">Robert Baron</author>
        </member>
        <member name="M:MachineCognitus.math.#ctor">
            <summary>
            Constructor is declared <c>private</c> because all members are <c>static</c>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:MachineCognitus.math.FP_ILOGB0">
            <summary>
            Value returned by <see cref="M:MachineCognitus.math.ilogb(System.Double)"/> or <see cref="M:MachineCognitus.math.ilogb(System.Single)"/> when its input argument is <c>±0</c>.
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FP_ILOGBNAN">
            <summary>
            Value returned by <see cref="M:MachineCognitus.math.ilogb(System.Double)"/> or <see cref="M:MachineCognitus.math.ilogb(System.Single)"/> when its input argument is <see cref="F:System.Double.NaN"/> or <see cref="F:System.Single.NaN"/> respectively.
            </summary>
        </member>
        <member name="F:MachineCognitus.math.INT_MAX">
            <summary>
            Value returned by <see cref="M:MachineCognitus.math.ilogb(System.Double)"/> or <see cref="M:MachineCognitus.math.ilogb(System.Single)"/> when its input argument is <c>±infinity</c>.
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FP_NORMAL">
            <summary>
            Indicates that a floating-point value is normal, i.e. not infinity, subnormal, NaN (not-a-number) or zero. 
            </summary>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Double)"/>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Single)"/>
        </member>
        <member name="F:MachineCognitus.math.FP_SUBNORMAL">
            <summary>
            Indicates that a floating-point value is subnormal. 
            </summary>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Double)"/>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Single)"/>
        </member>
        <member name="F:MachineCognitus.math.FP_ZERO">
            <summary>
            Indicates that a floating-point value is positive or negative zero. 
            </summary>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Double)"/>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Single)"/>
        </member>
        <member name="F:MachineCognitus.math.FP_INFINITE">
            <summary>
            Indicates that the value is not representable by the underlying type (positive or negative infinity)  
            </summary>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Double)"/>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Single)"/>
        </member>
        <member name="F:MachineCognitus.math.FP_NAN">
            <summary>
            Indicates that the value is not representable by the underlying type (positive or negative infinity)  
            </summary>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Double)"/>
            <seealso cref="M:MachineCognitus.math.fpclassify(System.Single)"/>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_BIAS">
            <summary>
            The exponent bias of a <see cref="T:System.Double"/>, i.e. value to subtract from the stored exponent to get the real exponent (<c>1023</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_BITS">
            <summary>
            The number of bits in the exponent of a <see cref="T:System.Double"/> (<c>11</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_MAX">
            <summary>
            The maximum (unbiased) exponent of a <see cref="T:System.Double"/> (<c>1023</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_MIN">
            <summary>
            The minimum (unbiased) exponent of a <see cref="T:System.Double"/> (<c>-1022</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_CLR_MASK">
            <summary>
            Bit-mask used for clearing the exponent bits of a <see cref="T:System.Double"/> (<c>0x800fffffffffffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_EXP_MASK">
            <summary>
            Bit-mask used for extracting the exponent bits of a <see cref="T:System.Double"/> (<c>0x7ff0000000000000</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_MANT_BITS">
            <summary>
            The number of bits in the mantissa of a <see cref="T:System.Double"/>, excludes the implicit leading <c>1</c> bit (<c>52</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_MANT_CLR_MASK">
            <summary>
            Bit-mask used for clearing the mantissa bits of a <see cref="T:System.Double"/> (<c>0xfff0000000000000</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_MANT_MASK">
            <summary>
            Bit-mask used for extracting the mantissa bits of a <see cref="T:System.Double"/> (<c>0x000fffffffffffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_MAX">
            <summary>
            Maximum positive, normal value of a <see cref="T:System.Double"/> (<c>1.7976931348623157E+308</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_MIN">
            <summary>
            Minimum positive, normal value of a <see cref="T:System.Double"/> (<c>2.2250738585072014e-308</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_DENORM_MAX">
            <summary>
            Maximum positive, subnormal value of a <see cref="T:System.Double"/> (<c>2.2250738585072009e-308</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_DENORM_MIN">
            <summary>
            Minimum positive, subnormal value of a <see cref="T:System.Double"/> (<c>4.94065645841247E-324</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_SGN_CLR_MASK">
            <summary>
            Bit-mask used for clearing the sign bit of a <see cref="T:System.Double"/> (<c>0x7fffffffffffffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.DBL_SGN_MASK">
            <summary>
            Bit-mask used for extracting the sign bit of a <see cref="T:System.Double"/> (<c>0x8000000000000000</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_BIAS">
            <summary>
            The exponent bias of a <see cref="T:System.Single"/>, i.e. value to subtract from the stored exponent to get the real exponent (<c>127</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_BITS">
            <summary>
            The number of bits in the exponent of a <see cref="T:System.Single"/> (<c>8</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_MAX">
            <summary>
            The maximum (unbiased) exponent of a <see cref="T:System.Single"/> (<c>127</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_MIN">
            <summary>
            The minimum (unbiased) exponent of a <see cref="T:System.Single"/> (<c>-126</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_CLR_MASK">
            <summary>
            Bit-mask used for clearing the exponent bits of a <see cref="T:System.Single"/> (<c>0x807fffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_EXP_MASK">
            <summary>
            Bit-mask used for extracting the exponent bits of a <see cref="T:System.Single"/> (<c>0x7f800000</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_MANT_BITS">
            <summary>
            The number of bits in the mantissa of a <see cref="T:System.Single"/>, excludes the implicit leading <c>1</c> bit (<c>23</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_MANT_CLR_MASK">
            <summary>
            Bit-mask used for clearing the mantissa bits of a <see cref="T:System.Single"/> (<c>0xff800000</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_MANT_MASK">
            <summary>
            Bit-mask used for extracting the mantissa bits of a <see cref="T:System.Single"/> (<c>0x007fffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_MAX">
            <summary>
            Maximum positive, normal value of a <see cref="T:System.Single"/> (<c>3.40282347e+38</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_MIN">
            <summary>
            Minimum positive, normal value of a <see cref="T:System.Single"/> (<c>1.17549435e-38</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_DENORM_MAX">
            <summary>
            Maximum positive, subnormal value of a <see cref="T:System.Single"/> (<c>1.17549421e-38</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_DENORM_MIN">
            <summary>
            Minimum positive, subnormal value of a <see cref="T:System.Single"/> (<c>1.401298E-45</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_SGN_CLR_MASK">
            <summary>
            Bit-mask used for clearing the sign bit of a <see cref="T:System.Single"/> (<c>0x7fffffff</c>).
            </summary>
        </member>
        <member name="F:MachineCognitus.math.FLT_SGN_MASK">
            <summary>
            Bit-mask used for extracting the sign bit of a <see cref="T:System.Single"/> (<c>0x80000000</c>).
            </summary>
        </member>
        <member name="M:MachineCognitus.math.fpclassify(System.Double)">
            <summary>
            Categorizes the given floating point <paramref name="number"/> into the categories: zero, subnormal, normal, infinite or NAN.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>One of <see cref="F:MachineCognitus.math.FP_INFINITE"/>, <see cref="F:MachineCognitus.math.FP_NAN"/>, <see cref="F:MachineCognitus.math.FP_NORMAL"/>, <see cref="F:MachineCognitus.math.FP_SUBNORMAL"/> or <see cref="F:MachineCognitus.math.FP_ZERO"/>, specifying the category of <paramref name="number"/>.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/fpclassify">fpclassify</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.fpclassify(System.Single)">
            <summary>
            Categorizes the given floating point <paramref name="number"/> into the categories: zero, subnormal, normal, infinite or NAN.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>One of <see cref="F:MachineCognitus.math.FP_INFINITE"/>, <see cref="F:MachineCognitus.math.FP_NAN"/>, <see cref="F:MachineCognitus.math.FP_NORMAL"/>, <see cref="F:MachineCognitus.math.FP_SUBNORMAL"/> or <see cref="F:MachineCognitus.math.FP_ZERO"/>, specifying the category of <paramref name="number"/>.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/fpclassify">fpclassify</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isfinite(System.Double)">
            <summary>
            Checks if the given <paramref name="number"/> has finite value.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is finite, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            A floating-point number is finite if it zero, normal, or subnormal, but not infinite or NaN.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isfinite">isfinite</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isfinite(System.Single)">
            <summary>
            Checks if the given <paramref name="number"/> has finite value.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is finite, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            A floating-point number is finite if it zero, normal, or subnormal, but not infinite or NaN.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isfinite">isfinite</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isinf(System.Double)">
            <summary>
            Checks if the given <paramref name="number"/> is positive or negative infinity.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> has an infinite value, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isinf">isinf</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isinf(System.Single)">
            <summary>
            Checks if the given <paramref name="number"/> is positive or negative infinity.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> has an infinite value, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isinf">isinf</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isnan(System.Double)">
            <summary>
            Checks if the given <paramref name="number"/> is NaN (Not A Number).
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is NaN, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isnan">isnan</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isnan(System.Single)">
            <summary>
            Checks if the given <paramref name="number"/> is NaN (Not A Number).
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is NaN, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isnan">isnan</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isnormal(System.Double)">
            <summary>
            Checks if the given <paramref name="number"/> is normal.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is normal, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            A floating-point number is normal if it is neither zero, subnormal, infinite, nor NaN.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isnormal">isnormal</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isnormal(System.Single)">
            <summary>
            Checks if the given <paramref name="number"/> is normal.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns><c>true</c> if <paramref name="number"/> is normal, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            A floating-point number is normal if it is neither zero, subnormal, infinite, nor NaN.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isnormal">isnormal</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.signbit(System.Double)">
            <summary>
            Gets the sign bit of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The sign bit of the specified floating-point <paramref name="number"/>.</returns>
            <remarks>
            <para>
            The function detects the sign bit of zeroes, infinities, and NaN. Along with
            <see cref="M:MachineCognitus.math.copysign(System.Double,System.Double)"/>, <see cref="M:MachineCognitus.math.signbit(System.Double)"/> is one
            of the only two portable ways to examine the sign of NaN. 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/signbit">signbit</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.signbit(System.Single)">
            <summary>
            Gets the sign bit of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The sign bit of the specified floating-point <paramref name="number"/>.</returns>
            <remarks>
            <para>
            The function detects the sign bit of zeroes, infinities, and NaN. Along with
            <see cref="M:MachineCognitus.math.copysign(System.Single,System.Single)"/>, <see cref="M:MachineCognitus.math.signbit(System.Single)"/> is one
            of the only two portable ways to examine the sign of NaN. 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/signbit">signbit</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.frexp(System.Double,System.Int32@)">
            <summary>
            Decomposes the given floating-point <paramref name="number"/> into a normalized fraction and an integral power of two.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">Reference to an <see cref="T:System.Int32"/> value to store the exponent to.</param>
            <returns>A <c>fraction</c> in the range <c>[0.5, 1)</c> so that <c><paramref name="number"/> = fraction * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet" >
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned, and <c>0</c> is returned in <paramref name="exponent"/>.</item>
            <item>If <paramref name="number"/> is infinite, it is returned, and an undefined value is returned in <paramref name="exponent"/>.</item>
            <item>If <paramref name="number"/> is NaN, it is returned, and an undefined value is returned in <paramref name="exponent"/>.</item>
            </list>
            <para>
            </para>
            <para>
            The function <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/>, together with its dual, <see cref="M:MachineCognitus.math.ldexp(System.Double,System.Int32)"/>,
            can be used to manipulate the representation of a floating-point number without direct bit manipulations.
            </para>
            <para>
            The relation of <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/> to <see cref="M:MachineCognitus.math.logb(System.Double)"/> and <see cref="M:MachineCognitus.math.scalbn(System.Double,System.Int32)"/> is:
            </para>
            <para>
            <c><paramref name="exponent"/> = (<paramref name="number"/> == 0) ? 0 : (int)(1 + <see cref="M:MachineCognitus.math.logb(System.Double)">logb</see>(<paramref name="number"/>))</c><br/>
            <c>fraction = <see cref="M:MachineCognitus.math.scalbn(System.Double,System.Int32)">scalbn</see>(<paramref name="number"/>, -<paramref name="exponent"/>)</c>
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/frexp">frexp</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.frexp(12.8D, ref exponent) = 0.8D);
            Assert.IsTrue(exponent = 4);
            
            Assert.IsTrue(math.frexp(0.25D, ref exponent) == 0.5D);
            Assert.IsTrue(exponent == -1);
            
            Assert.IsTrue(math.frexp(System.Math.Pow(2D, 1023), ref exponent) == 0.5D);
            Assert.IsTrue(exponent == 1024);
            
            Assert.IsTrue(math.frexp(-System.Math.Pow(2D, -1074), ref exponent) == -0.5D);
            Assert.IsTrue(exponent == -1073);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.frexp(12.8D, exponent) = 0.8D);
            Assert.IsTrue(exponent = 4);
            
            Assert.IsTrue(math.frexp(0.25D, exponent) = 0.5D);
            Assert.IsTrue(exponent = -1);
            
            Assert.IsTrue(math.frexp(System.Math.Pow(2D, 1023), exponent) = 0.5D);
            Assert.IsTrue(exponent = 1024);
            
            Assert.IsTrue(math.frexp(-System.Math.Pow(2D, -1074), exponent) = -0.5D);
            Assert.IsTrue(exponent = -1073);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.frexp(System.Single,System.Int32@)">
            <summary>
            Decomposes the given floating-point <paramref name="number"/> into a normalized fraction and an integral power of two.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">Reference to an <see cref="T:System.Int32"/> value to store the exponent to.</param>
            <returns>A <c>fraction</c> in the range <c>[0.5, 1)</c> so that <c><paramref name="number"/> = fraction * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet" >
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned, and <c>0</c> is returned in <paramref name="exponent"/>.</item>
            <item>If <paramref name="number"/> is infinite, it is returned, and an undefined value is returned in <paramref name="exponent"/>.</item>
            <item>If <paramref name="number"/> is NaN, it is returned, and an undefined value is returned in <paramref name="exponent"/>.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/>, together with its dual, <see cref="M:MachineCognitus.math.ldexp(System.Single,System.Int32)"/>,
            can be used to manipulate the representation of a floating-point number without direct bit manipulations.
            </para>
            <para>
            The relation of <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/> to <see cref="M:MachineCognitus.math.logb(System.Single)"/> and <see cref="M:MachineCognitus.math.scalbn(System.Single,System.Int32)"/> is:
            </para>
            <para>
            <c><paramref name="exponent"/> = (<paramref name="number"/> == 0) ? 0 : (int)(1 + <see cref="M:MachineCognitus.math.logb(System.Single)">logb</see>(<paramref name="number"/>))</c><br/>
            <c>fraction = <see cref="M:MachineCognitus.math.scalbn(System.Single,System.Int32)">scalbn</see>(<paramref name="number"/>, -<paramref name="exponent"/>)</c>
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/frexp">frexp</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.frexp(12.8F, ref exponent) = 0.8F);
            Assert.IsTrue(exponent = 4);
            
            Assert.IsTrue(math.frexp(0.25F, ref exponent) == 0.5F);
            Assert.IsTrue(exponent == -1);
            
            Assert.IsTrue(math.frexp(System.Math.Pow(2F, 127F), ref exponent) == 0.5F);
            Assert.IsTrue(exponent == 128);
            
            Assert.IsTrue(math.frexp(-System.Math.Pow(2F, -149F), ref exponent) == -0.5F);
            Assert.IsTrue(exponent == -148);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.frexp(12.8F, exponent) = 0.8F);
            Assert.IsTrue(exponent = 4);
            
            Assert.IsTrue(math.frexp(0.25F, exponent) = 0.5F);
            Assert.IsTrue(exponent = -1);
            
            Assert.IsTrue(math.frexp(System.Math.Pow(2F, 127F), exponent) = 0.5F);
            Assert.IsTrue(exponent = 128);
            
            Assert.IsTrue(math.frexp(-System.Math.Pow(2F, -149F), exponent) = -0.5F);
            Assert.IsTrue(exponent = -148);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.ilogb(System.Double)">
            <summary>
            Gets the unbiased exponent of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The unbiased exponent of the specified floating-point <paramref name="number"/>, or a special value if <paramref name="number"/> is not normal or subnormal.</returns>
            <remarks>
            <para>
            The unbiased exponent is the integral part of the logarithm base 2 of <paramref name="number"/>.
            The unbiased exponent is such that:
            </para>
            <para>
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Double)">significand</see>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.ilogb(System.Double)">ilogb</see>(<paramref name="number"/>)</c>.
            </para>
            <para>
            The return unbiased exponent is valid for all normal and subnormal numbers. Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, <see cref="F:MachineCognitus.math.FP_ILOGB0"/> is returned.</item>
            <item>If <paramref name="number"/> is infinite, <see cref="F:MachineCognitus.math.INT_MAX"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:MachineCognitus.math.FP_ILOGBNAN"/> is returned.</item>
            </list>
            <para>
            If <paramref name="number"/> is not zero, infinite, or NaN, the value returned is exactly equivalent to
            <c>(<see cref="T:System.Int32"/>)<see cref="M:MachineCognitus.math.logb(System.Double)">logb</see>(<paramref name="number"/>)</c>. 
            </para>
            <para>
            The value of the exponent returned by <see cref="M:MachineCognitus.math.ilogb(System.Double)"/> is always <c>1</c> less than the exponent retuned by
            <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/> because of the different normalization requirements:
            for <see cref="M:MachineCognitus.math.ilogb(System.Double)"/>, the normalized significand is in the interval <c>[1, 2)</c>,
            but for <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/>, the normalized significand is in the interval <c>[0.5, 1)</c>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/ilogb">ilogb</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.ilogb(1D) == 0);
            Assert.IsTrue(math.ilogb(System.Math.E) == 1);
            Assert.IsTrue(math.ilogb(1024D) == 10);
            Assert.IsTrue(math.ilogb(-2000D) == 10);
            
            Assert.IsTrue(math.ilogb(2D) == 1);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 56D)) == 56);
            Assert.IsTrue(math.ilogb(1.1D * Math.Pow(2D, -1074D)) == -1074);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, -1075D)) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 1024D)) == math.INT_MAX);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 1023D)) == 1023);
            Assert.IsTrue(math.ilogb(2D * Math.Pow(2D, 102D)) == 103);
            
            Assert.IsTrue(math.ilogb(math.DBL_DENORM_MIN) == math.DBL_EXP_MIN - math.DBL_MANT_BITS);
            Assert.IsTrue(math.ilogb(math.DBL_DENORM_MAX) == math.DBL_EXP_MIN - 1);
            Assert.IsTrue(math.ilogb(math.DBL_MIN) == math.DBL_EXP_MIN);
            Assert.IsTrue(math.ilogb(math.DBL_MAX) == math.DBL_EXP_MAX);
            
            Assert.IsTrue(math.ilogb(System.Double.PositiveInfinity) == math.INT_MAX);
            Assert.IsTrue(math.ilogb(System.Double.NegativeInfinity) == math.INT_MAX);
            Assert.IsTrue(math.ilogb(0D) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(-0D) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(System.Double.NaN) == math.FP_ILOGBNAN);
            Assert.IsTrue(math.ilogb(-System.Double.NaN) == math.FP_ILOGBNAN);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.ilogb(1D) = 0);
            Assert.IsTrue(math.ilogb(System.Math.E) = 1);
            Assert.IsTrue(math.ilogb(1024D) = 10);
            Assert.IsTrue(math.ilogb(-2000D) = 10);
            
            Assert.IsTrue(math.ilogb(2D) = 1);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 56D)) = 56);
            Assert.IsTrue(math.ilogb(1.1D * Math.Pow(2D, -1074D)) = -1074);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, -1075D)) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 1024D)) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(Math.Pow(2D, 1023D)) = 1023);
            Assert.IsTrue(math.ilogb(2D * Math.Pow(2D, 102D)) = 103);
            
            Assert.IsTrue(math.ilogb(math.DBL_DENORM_MIN) = math.DBL_EXP_MIN - math.DBL_MANT_BITS);
            Assert.IsTrue(math.ilogb(math.DBL_DENORM_MAX) = math.DBL_EXP_MIN - 1);
            Assert.IsTrue(math.ilogb(math.DBL_MIN) = math.DBL_EXP_MIN);
            Assert.IsTrue(math.ilogb(math.DBL_MAX) = math.DBL_EXP_MAX);
            
            Assert.IsTrue(math.ilogb(System.Double.PositiveInfinity) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(System.Double.NegativeInfinity) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(0D) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(-0D) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(System.Double.NaN) = math.FP_ILOGBNAN);
            Assert.IsTrue(math.ilogb(-System.Double.NaN) = math.FP_ILOGBNAN);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.ilogb(System.Single)">
            <summary>
            Gets the unbiased exponent of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The unbiased exponent of the specified floating-point <paramref name="number"/>, or a special value if <paramref name="number"/> is not normal or subnormal.</returns>
            <remarks>
            <para>
            The unbiased exponent is the integral part of the logarithm base 2 of <paramref name="number"/>.
            The unbiased exponent is such that:
            </para>
            <para>
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Single)">significand</see>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.ilogb(System.Single)">ilogb</see>(<paramref name="number"/>)</c>.
            </para>
            <para>
            The return unbiased exponent is valid for all normal and subnormal numbers. Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, <see cref="F:MachineCognitus.math.FP_ILOGB0"/> is returned.</item>
            <item>If <paramref name="number"/> is infinite, <see cref="F:MachineCognitus.math.INT_MAX"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:MachineCognitus.math.FP_ILOGBNAN"/> is returned.</item>
            </list>
            <para>
            If <paramref name="number"/> is not zero, infinite, or NaN, the value returned is exactly equivalent to
            <c>(<see cref="T:System.Int32"/>)<see cref="M:MachineCognitus.math.logb(System.Single)">logb</see>(<paramref name="number"/>)</c>. 
            </para>
            <para>
            The value of the exponent returned by <see cref="M:MachineCognitus.math.ilogb(System.Single)"/> is always <c>1</c> less than the exponent retuned by
            <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/> because of the different normalization requirements:
            for <see cref="M:MachineCognitus.math.ilogb(System.Single)"/>, the normalized significand is in the interval <c>[1, 2)</c>,
            but for <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/>, the normalized significand is in the interval <c>[0.5, 1)</c>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/ilogb">ilogb</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.ilogb(1F) == 0);
            Assert.IsTrue(math.ilogb((float)System.Math.E) == 1);
            Assert.IsTrue(math.ilogb(1024F) == 10);
            Assert.IsTrue(math.ilogb(-2000F) == 10);
            
            Assert.IsTrue(math.ilogb(2F) == 1);
            Assert.IsTrue(math.ilogb((float)Math.Pow(2F, 56F)) == 56);
            Assert.IsTrue(math.ilogb(1.1F * (float)Math.Pow(2F, -149F)) == -149);
            Assert.IsTrue(math.ilogb((float)Math.Pow(2F, -150F)) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb((float)Math.Pow(2F, 128F)) == math.INT_MAX);
            Assert.IsTrue(math.ilogb((float)Math.Pow(2D, 127F)) == 127);
            Assert.IsTrue(math.ilogb(2F * (float)Math.Pow(2F, 102F)) == 103);
            
            Assert.IsTrue(math.ilogb(math.FLT_DENORM_MIN) == math.FLT_EXP_MIN - math.FLT_MANT_BITS);
            Assert.IsTrue(math.ilogb(math.FLT_DENORM_MAX) == math.FLT_EXP_MIN - 1);
            Assert.IsTrue(math.ilogb(math.FLT_MIN) == math.FLT_EXP_MIN);
            Assert.IsTrue(math.ilogb(math.FLT_MAX) == math.FLT_EXP_MAX);
            
            Assert.IsTrue(math.ilogb(System.Single.PositiveInfinity) == math.INT_MAX);
            Assert.IsTrue(math.ilogb(System.Single.NegativeInfinity) == math.INT_MAX);
            Assert.IsTrue(math.ilogb(0F) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(-0F) == math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(System.Single.NaN) == math.FP_ILOGBNAN);
            Assert.IsTrue(math.ilogb(-System.Single.NaN) == math.FP_ILOGBNAN);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.ilogb(1F) = 0);
            Assert.IsTrue(math.ilogb(CSng(System.Math.E)) = 1);
            Assert.IsTrue(math.ilogb(1024F) = 10);
            Assert.IsTrue(math.ilogb(-2000F) = 10);
            
            Assert.IsTrue(math.ilogb(2F) = 1);
            Assert.IsTrue(math.ilogb(CSng(Math.Pow(2F, 56F))) = 56);
            Assert.IsTrue(math.ilogb(1.1F * CSng(Math.Pow(2F, -149F))) = -149);
            Assert.IsTrue(math.ilogb(CSng(Math.Pow(2F, -150F))) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(CSng(Math.Pow(2F, 128F))) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(CSng(Math.Pow(2D, 127F))) = 127);
            Assert.IsTrue(math.ilogb(2F * CSng(Math.Pow(2F, 102F))) = 103);
            
            Assert.IsTrue(math.ilogb(math.FLT_DENORM_MIN) = math.FLT_EXP_MIN - math.FLT_MANT_BITS);
            Assert.IsTrue(math.ilogb(math.FLT_DENORM_MAX) = math.FLT_EXP_MIN - 1);
            Assert.IsTrue(math.ilogb(math.FLT_MIN) = math.FLT_EXP_MIN);
            Assert.IsTrue(math.ilogb(math.FLT_MAX) = math.FLT_EXP_MAX);
            
            Assert.IsTrue(math.ilogb(System.Single.PositiveInfinity) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(System.Single.NegativeInfinity) = math.INT_MAX);
            Assert.IsTrue(math.ilogb(0F) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(-0F) = math.FP_ILOGB0);
            Assert.IsTrue(math.ilogb(System.Single.NaN) = math.FP_ILOGBNAN);
            Assert.IsTrue(math.ilogb(-System.Single.NaN) = math.FP_ILOGBNAN);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.ldexp(System.Double,System.Int32)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Double.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.ldexp(System.Double,System.Int32)"/> ("load exponent"), together with its dual, <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/>,
            can be used to manipulate the representation of a floating-point number without direct bit manipulations.
            </para>
            <para>
            The function <see cref="M:MachineCognitus.math.ldexp(System.Double,System.Int32)"/> is equivalent to <see cref="M:MachineCognitus.math.scalbn(System.Double,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/ldexp">ldexp</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.ldexp(0.8D, 4) == 12.8D);
            Assert.IsTrue(math.ldexp(-0.854375D, 5) == -27.34D);
            Assert.IsTrue(math.ldexp(1D, 0) == 1D);
            
            Assert.IsTrue(math.ldexp(math.DBL_MIN / 2D, 0) == math.DBL_MIN / 2D);
            Assert.IsTrue(math.ldexp(math.DBL_MIN / 2D, 1) == math.DBL_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) == 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.ldexp(1D, System.Int32.MaxValue) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.ldexp(1D, System.Int32.MinValue) == 0D);
            Assert.IsTrue(math.ldexp(-1D, System.Int32.MaxValue) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.ldexp(-1D, System.Int32.MinValue) == -0D);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.ldexp(0.8D, 4) = 12.8D);
            Assert.IsTrue(math.ldexp(-0.854375D, 5) = -27.34D);
            Assert.IsTrue(math.ldexp(1D, 0) = 1D);
            
            Assert.IsTrue(math.ldexp(math.DBL_MIN / 2D, 0) = math.DBL_MIN / 2D);
            Assert.IsTrue(math.ldexp(math.DBL_MIN / 2D, 1) = math.DBL_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) = 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.ldexp(1D, System.Int32.MaxValue) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.ldexp(1D, System.Int32.MinValue) = 0D);
            Assert.IsTrue(math.ldexp(-1D, System.Int32.MaxValue) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.ldexp(-1D, System.Int32.MinValue) = -0D);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.ldexp(System.Single,System.Int32)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Single.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.ldexp(System.Single,System.Int32)"/> ("load exponent"), together with its dual, <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/>,
            can be used to manipulate the representation of a floating-point number without direct bit manipulations.
            </para>
            <para>
            The function <see cref="M:MachineCognitus.math.ldexp(System.Single,System.Int32)"/> is equivalent to <see cref="M:MachineCognitus.math.scalbn(System.Single,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/ldexp">ldexp</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.ldexp(0.8F, 4) == 12.8F);
            Assert.IsTrue(math.ldexp(-0.854375F, 5) == -27.34F);
            Assert.IsTrue(math.ldexp(1F, 0) == 1F);
            
            Assert.IsTrue(math.ldexp(math.FLT_MIN / 2F, 0) == math.FLT_MIN / 2F);
            Assert.IsTrue(math.ldexp(math.FLT_MIN / 2F, 1) == math.FLT_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) == 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.ldexp(1F, System.Int32.MaxValue) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.ldexp(1F, System.Int32.MinValue) == 0F);
            Assert.IsTrue(math.ldexp(-1F, System.Int32.MaxValue) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.ldexp(-1F, System.Int32.MinValue) == -0F);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.ldexp(0.8F, 4) = 12.8F);
            Assert.IsTrue(math.ldexp(-0.854375F, 5) = -27.34F);
            Assert.IsTrue(math.ldexp(1F, 0) = 1F);
            
            Assert.IsTrue(math.ldexp(math.FLT_MIN / 2F, 0) = math.FLT_MIN / 2F);
            Assert.IsTrue(math.ldexp(math.FLT_MIN / 2F, 1) = math.FLT_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) = 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.ldexp(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.ldexp(1F, System.Int32.MaxValue) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.ldexp(1F, System.Int32.MinValue) = 0F);
            Assert.IsTrue(math.ldexp(-1F, System.Int32.MaxValue) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.ldexp(-1F, System.Int32.MinValue) = -0F);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.logb(System.Double)">
            <summary>
            Gets the unbiased exponent of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The unbiased exponent of the specified floating-point <paramref name="number"/>, or a special value if <paramref name="number"/> is not normal or subnormal.</returns>
            <remarks>
            <para>
            The unbiased exponent is the integral part of the logarithm base 2 of <paramref name="number"/>.
            The unbiased exponent is such that
            </para>
            <para>
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Double)">significand</see>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.logb(System.Double)">logb</see>(<paramref name="number"/>)</c>.
            </para>
            <para>
            The return unbiased exponent is valid for all normal and subnormal numbers. Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, <see cref="F:System.Double.NegativeInfinity"/> is returned.</item>
            <item>If <paramref name="number"/> is infinite, <see cref="F:System.Double.PositiveInfinity"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Double.NaN"/> is returned.</item>
            </list>
            <para>
            If <paramref name="number"/> is not zero, infinite, or NaN, the value returned is exactly equivalent to
            <c><see cref="M:MachineCognitus.math.ilogb(System.Double)">ilogb</see>(<paramref name="number"/>)</c>. 
            </para>
            <para>
            The value of the exponent returned by <see cref="M:MachineCognitus.math.logb(System.Double)"/> is always <c>1</c> less than the exponent retuned by
            <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/> because of the different normalization requirements:
            for <see cref="M:MachineCognitus.math.logb(System.Double)"/>, the normalized significand is in the interval <c>[1, 2)</c>,
            but for <see cref="M:MachineCognitus.math.frexp(System.Double,System.Int32@)"/>, the normalized significand is in the interval <c>[0.5, 1)</c>. 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/logb">logb</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.logb(1D) == 0D);
            Assert.IsTrue(math.logb(System.Math.E) == 1D);
            Assert.IsTrue(math.logb(1024D) == 10D);
            Assert.IsTrue(math.logb(-2000D) == 10D);
            
            Assert.IsTrue(math.logb(2D) == 1D);
            Assert.IsTrue(math.logb(Math.Pow(2D, 56D)) == 56D);
            Assert.IsTrue(math.logb(1.1D * Math.Pow(2D, -1074D)) == -1074D);
            Assert.IsTrue(math.logb(Math.Pow(2D, -1075D)) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.logb(Math.Pow(2D, 1024D)) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(Math.Pow(2D, 1023D)) == 1023D);
            Assert.IsTrue(math.logb(2D * Math.Pow(2D, 102D)) == 103D);
            
            Assert.IsTrue(math.logb(math.DBL_DENORM_MIN) == math.DBL_EXP_MIN - math.DBL_MANT_BITS);
            Assert.IsTrue(math.logb(math.DBL_DENORM_MAX) == math.DBL_EXP_MIN - 1);
            Assert.IsTrue(math.logb(math.DBL_MIN) == math.DBL_EXP_MIN);
            Assert.IsTrue(math.logb(math.DBL_MAX) == math.DBL_EXP_MAX);
            
            Assert.IsTrue(math.logb(System.Double.PositiveInfinity) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(System.Double.NegativeInfinity) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(0D) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.logb(-0D) == System.Double.NegativeInfinity);
            Assert.IsTrue(System.Double.IsNaN(math.logb(System.Double.NaN)));
            Assert.IsTrue(System.Double.IsNaN(math.logb(-System.Double.NaN)));
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.logb(1D) = 0D);
            Assert.IsTrue(math.logb(System.Math.E) = 1D);
            Assert.IsTrue(math.logb(1024D) = 10D);
            Assert.IsTrue(math.logb(-2000D) = 10D);
            
            Assert.IsTrue(math.logb(2D) = 1D);
            Assert.IsTrue(math.logb(Math.Pow(2D, 56D)) = 56D);
            Assert.IsTrue(math.logb(1.1D * Math.Pow(2D, -1074D)) = -1074D);
            Assert.IsTrue(math.logb(Math.Pow(2D, -1075D)) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.logb(Math.Pow(2D, 1024D)) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(Math.Pow(2D, 1023D)) = 1023D);
            Assert.IsTrue(math.logb(2D * Math.Pow(2D, 102D)) = 103D);
            
            Assert.IsTrue(math.logb(math.DBL_DENORM_MIN) = math.DBL_EXP_MIN - math.DBL_MANT_BITS);
            Assert.IsTrue(math.logb(math.DBL_DENORM_MAX) = math.DBL_EXP_MIN - 1);
            Assert.IsTrue(math.logb(math.DBL_MIN) = math.DBL_EXP_MIN);
            Assert.IsTrue(math.logb(math.DBL_MAX) = math.DBL_EXP_MAX);
            
            Assert.IsTrue(math.logb(System.Double.PositiveInfinity) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(System.Double.NegativeInfinity) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.logb(0D) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.logb(-0D) = System.Double.NegativeInfinity);
            Assert.IsTrue(System.Double.IsNaN(math.logb(System.Double.NaN)));
            Assert.IsTrue(System.Double.IsNaN(math.logb(-System.Double.NaN)));
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.logb(System.Single)">
            <summary>
            Gets the unbiased exponent of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The unbiased exponent of the specified floating-point <paramref name="number"/>, or a special value if <paramref name="number"/> is not normal or subnormal.</returns>
            <remarks>
            <para>
            The unbiased exponent is the integral part of the logarithm base 2 of <paramref name="number"/>.
            The unbiased exponent is such that
            </para>
            <para>
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Single)">significand</see>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.logb(System.Single)">logb</see>(<paramref name="number"/>)</c>.
            </para>
            <para>
            The return unbiased exponent is valid for all normal and subnormal numbers. Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, <see cref="F:System.Single.NegativeInfinity"/> is returned.</item>
            <item>If <paramref name="number"/> is infinite, <see cref="F:System.Single.PositiveInfinity"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Single.NaN"/> is returned.</item>
            </list>
            <para>
            If <paramref name="number"/> is not zero, infinite, or NaN, the value returned is exactly equivalent to
            <c><see cref="M:MachineCognitus.math.ilogb(System.Single)">ilogb</see>(<paramref name="number"/>)</c>. 
            </para>
            <para>
            The value of the exponent returned by <see cref="M:MachineCognitus.math.logb(System.Single)"/> is always <c>1</c> less than the exponent retuned by
            <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/> because of the different normalization requirements:
            for <see cref="M:MachineCognitus.math.logb(System.Single)"/>, the normalized significand is in the interval <c>[1, 2)</c>,
            but for <see cref="M:MachineCognitus.math.frexp(System.Single,System.Int32@)"/>, the normalized significand is in the interval <c>[0.5, 1)</c>. 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/logb">logb</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.logb(1F) == 0F);
            Assert.IsTrue(math.logb((float)System.Math.E) == 1F);
            Assert.IsTrue(math.logb(1024F) == 10F);
            Assert.IsTrue(math.logb(-2000F) == 10F);
            
            Assert.IsTrue(math.logb(2F) == 1F);
            Assert.IsTrue(math.logb((float)Math.Pow(2F, 56F)) == 56F);
            Assert.IsTrue(math.logb(1.1F * (float)Math.Pow(2F, -149F)) == -149F);
            Assert.IsTrue(math.logb((float)Math.Pow(2F, -150F)) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.logb((float)Math.Pow(2F, 128F)) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb((float)Math.Pow(2D, 127F)) == 127F);
            Assert.IsTrue(math.logb(2F * (float)Math.Pow(2F, 102F)) == 103F);
            
            Assert.IsTrue(math.logb(math.FLT_DENORM_MIN) == math.FLT_EXP_MIN - math.FLT_MANT_BITS);
            Assert.IsTrue(math.logb(math.FLT_DENORM_MAX) == math.FLT_EXP_MIN - 1);
            Assert.IsTrue(math.logb(math.FLT_MIN) == math.FLT_EXP_MIN);
            Assert.IsTrue(math.logb(math.FLT_MAX) == math.FLT_EXP_MAX);
            
            Assert.IsTrue(math.logb(System.Single.PositiveInfinity) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb(System.Single.NegativeInfinity) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb(0F) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.logb(-0F) == System.Single.NegativeInfinity);
            Assert.IsTrue(System.Single.IsNaN(math.logb(System.Single.NaN)));
            Assert.IsTrue(System.Single.IsNaN(math.logb(-System.Single.NaN)));
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.logb(1F) = 0F);
            Assert.IsTrue(math.logb(CSng(System.Math.E)) = 1F);
            Assert.IsTrue(math.logb(1024F) = 10F);
            Assert.IsTrue(math.logb(-2000F) = 10F);
            
            Assert.IsTrue(math.logb(2F) = 1F);
            Assert.IsTrue(math.logb(CSng(Math.Pow(2F, 56F))) = 56F);
            Assert.IsTrue(math.logb(1.1F * CSng(Math.Pow(2F, -149F))) = -149F);
            Assert.IsTrue(math.logb(CSng(Math.Pow(2F, -150F))) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.logb(CSng(Math.Pow(2F, 128F))) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb(CSng(Math.Pow(2D, 127F))) = 127F);
            Assert.IsTrue(math.logb(2F * CSng(Math.Pow(2F, 102F))) = 103F);
            
            Assert.IsTrue(math.logb(math.FLT_DENORM_MIN) = math.FLT_EXP_MIN - math.FLT_MANT_BITS);
            Assert.IsTrue(math.logb(math.FLT_DENORM_MAX) = math.FLT_EXP_MIN - 1);
            Assert.IsTrue(math.logb(math.FLT_MIN) = math.FLT_EXP_MIN);
            Assert.IsTrue(math.logb(math.FLT_MAX) = math.FLT_EXP_MAX);
            
            Assert.IsTrue(math.logb(System.Single.PositiveInfinity) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb(System.Single.NegativeInfinity) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.logb(0F) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.logb(-0F) = System.Single.NegativeInfinity);
            Assert.IsTrue(System.Single.IsNaN(math.logb(System.Single.NaN)));
            Assert.IsTrue(System.Single.IsNaN(math.logb(-System.Single.NaN)));
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.scalbn(System.Double,System.Int32)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Double.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.scalbn(System.Double,System.Int32)"/> is equivalent to <see cref="M:MachineCognitus.math.ldexp(System.Double,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/scalbn">scalbn</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.scalbn(0.8D, 4) == 12.8D);
            Assert.IsTrue(math.scalbn(-0.854375D, 5) == -27.34D);
            Assert.IsTrue(math.scalbn(1D, 0) == 1D);
            
            Assert.IsTrue(math.scalbn(math.DBL_MIN / 2D, 0) == math.DBL_MIN / 2D);
            Assert.IsTrue(math.scalbn(math.DBL_MIN / 2D, 1) == math.DBL_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) == 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.scalbn(1D, System.Int32.MaxValue) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.scalbn(1D, System.Int32.MinValue) == 0D);
            Assert.IsTrue(math.scalbn(-1D, System.Int32.MaxValue) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.scalbn(-1D, System.Int32.MinValue) == -0D);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.scalbn(0.8D, 4) = 12.8D);
            Assert.IsTrue(math.scalbn(-0.854375D, 5) = -27.34D);
            Assert.IsTrue(math.scalbn(1D, 0) = 1D);
            
            Assert.IsTrue(math.scalbn(math.DBL_MIN / 2D, 0) = math.DBL_MIN / 2D);
            Assert.IsTrue(math.scalbn(math.DBL_MIN / 2D, 1) = math.DBL_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) = 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.scalbn(1D, System.Int32.MaxValue) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.scalbn(1D, System.Int32.MinValue) = 0D);
            Assert.IsTrue(math.scalbn(-1D, System.Int32.MaxValue) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.scalbn(-1D, System.Int32.MinValue) = -0D);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.scalbn(System.Single,System.Int32)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Single.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.scalbn(System.Single,System.Int32)"/> is equivalent to <see cref="M:MachineCognitus.math.ldexp(System.Single,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/scalbn">scalbn</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.scalbn(0.8F, 4) == 12.8F);
            Assert.IsTrue(math.scalbn(-0.854375F, 5) == -27.34F);
            Assert.IsTrue(math.scalbn(1F, 0) == 1F);
            
            Assert.IsTrue(math.scalbn(math.FLT_MIN / 2F, 0) == math.FLT_MIN / 2F);
            Assert.IsTrue(math.scalbn(math.FLT_MIN / 2F, 1) == math.FLT_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) == 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.scalbn(1F, System.Int32.MaxValue) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.scalbn(1F, System.Int32.MinValue) == 0F);
            Assert.IsTrue(math.scalbn(-1F, System.Int32.MaxValue) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.scalbn(-1F, System.Int32.MinValue) == -0F);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.scalbn(0.8F, 4) = 12.8F);
            Assert.IsTrue(math.scalbn(-0.854375F, 5) = -27.34F);
            Assert.IsTrue(math.scalbn(1F, 0) = 1F);
            
            Assert.IsTrue(math.scalbn(math.FLT_MIN / 2F, 0) = math.FLT_MIN / 2F);
            Assert.IsTrue(math.scalbn(math.FLT_MIN / 2F, 1) = math.FLT_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) = 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbn(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.scalbn(1F, System.Int32.MaxValue) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.scalbn(1F, System.Int32.MinValue) = 0F);
            Assert.IsTrue(math.scalbn(-1F, System.Int32.MaxValue) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.scalbn(-1F, System.Int32.MinValue) = -0F);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.scalbln(System.Double,System.Int64)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Double.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.scalbln(System.Double,System.Int64)"/> is equivalent to <see cref="M:MachineCognitus.math.ldexp(System.Double,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/scalbn">scalbln</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.scalbln(0.8D, 4L) == 12.8D);
            Assert.IsTrue(math.scalbln(-0.854375D, 5L) == -27.34D);
            Assert.IsTrue(math.scalbln(1D, 0L) == 1D);
            
            Assert.IsTrue(math.scalbln(math.DBL_MIN / 2D, 0L) == math.DBL_MIN / 2D);
            Assert.IsTrue(math.scalbln(math.DBL_MIN / 2D, 1L) == math.DBL_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) == 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) == math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.scalbln(1D, System.Int64.MaxValue) == System.Double.PositiveInfinity);
            Assert.IsTrue(math.scalbln(1D, System.Int64.MinValue) == 0D);
            Assert.IsTrue(math.scalbln(-1D, System.Int64.MaxValue) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.scalbln(-1D, System.Int64.MinValue) == -0D);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.scalbln(0.8D, 4L) = 12.8D);
            Assert.IsTrue(math.scalbln(-0.854375D, 5L) = -27.34D);
            Assert.IsTrue(math.scalbln(1D, 0L) = 1D);
            
            Assert.IsTrue(math.scalbln(math.DBL_MIN / 2D, 0L) = math.DBL_MIN / 2D);
            Assert.IsTrue(math.scalbln(math.DBL_MIN / 2D, 1L) = math.DBL_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS) = 2D * math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.5D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.DBL_MIN * 1.25D, -math.DBL_MANT_BITS - 1) = math.DBL_DENORM_MIN);
            
            Assert.IsTrue(math.scalbln(1D, System.Int64.MaxValue) = System.Double.PositiveInfinity);
            Assert.IsTrue(math.scalbln(1D, System.Int64.MinValue) = 0D);
            Assert.IsTrue(math.scalbln(-1D, System.Int64.MaxValue) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.scalbln(-1D, System.Int64.MinValue) = -0D);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.scalbln(System.Single,System.Int64)">
            <summary>
            Scales the specified floating-point <paramref name="number"/> by 2^<paramref name="exponent"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <param name="exponent">The exponent of the power of two.</param>
            <returns>The value <c><paramref name="number"/> * 2^<paramref name="exponent"/></c>.</returns>
            <remarks>
            <para>
            Special values are treated as follows.
            </para>
            <list type="bullet">
            <item>If <paramref name="number"/> is <c>±0</c>, it is returned.</item>
            <item>If <paramref name="number"/> is infinite, it is returned.</item>
            <item>If <paramref name="exponent"/> is <c>0</c>, <paramref name="number"/> is returned.</item>
            <item>If <paramref name="number"/> is NaN, <see cref="F:System.Single.NaN"/> is returned.</item>
            </list>
            <para>
            The function <see cref="M:MachineCognitus.math.scalbln(System.Single,System.Int64)"/> is equivalent to <see cref="M:MachineCognitus.math.ldexp(System.Single,System.Int32)"/>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/scalbn">scalbln</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.scalbln(0.8F, 4L) == 12.8F);
            Assert.IsTrue(math.scalbln(-0.854375F, 5L) == -27.34F);
            Assert.IsTrue(math.scalbln(1F, 0L) == 1F);
            
            Assert.IsTrue(math.scalbln(math.FLT_MIN / 2F, 0L) == math.FLT_MIN / 2F);
            Assert.IsTrue(math.scalbln(math.FLT_MIN / 2F, 1L) == math.FLT_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) == 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) == math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.scalbln(1F, System.Int64.MaxValue) == System.Single.PositiveInfinity);
            Assert.IsTrue(math.scalbln(1F, System.Int64.MinValue) == 0F);
            Assert.IsTrue(math.scalbln(-1F, System.Int64.MaxValue) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.scalbln(-1F, System.Int64.MinValue) == -0F);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.scalbln(0.8F, 4L) = 12.8F);
            Assert.IsTrue(math.scalbln(-0.854375F, 5L) = -27.34F);
            Assert.IsTrue(math.scalbln(1F, 0L) = 1F);
            
            Assert.IsTrue(math.scalbln(math.FLT_MIN / 2F, 0L) = math.FLT_MIN / 2F);
            Assert.IsTrue(math.scalbln(math.FLT_MIN / 2F, 1L) = math.FLT_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS) = 2F * math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.5F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.scalbln(math.FLT_MIN * 1.25F, -math.FLT_MANT_BITS - 1) = math.FLT_DENORM_MIN);
            
            Assert.IsTrue(math.scalbln(1F, System.Int64.MaxValue) = System.Single.PositiveInfinity);
            Assert.IsTrue(math.scalbln(1F, System.Int64.MinValue) = 0F);
            Assert.IsTrue(math.scalbln(-1F, System.Int64.MaxValue) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.scalbln(-1F, System.Int64.MinValue) = -0F);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.copysign(System.Double,System.Double)">
            <summary>
            Copies the sign of <paramref name="number2"/> to <paramref name="number1"/>.
            </summary>
            <param name="number1">A floating-point number.</param>
            <param name="number2">A floating-point number.</param>
            <returns>The floating-point number whose absolute value is that of <paramref name="number1"/> with the sign of <paramref name="number2"/>.</returns>
            <remarks>
            <para>
            <see cref="M:MachineCognitus.math.copysign(System.Double,System.Double)"/> is the only portable way to manipulate the sign of a <see cref="F:System.Double.NaN"/> value (to examine
            the sign of a <see cref="F:System.Double.NaN"/>, <see cref="M:MachineCognitus.math.signbit(System.Double)"/> may also be used). 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/copysign">copysign</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.copysign(0D, -0D) == -0D);
            Assert.IsTrue(math.copysign(0D, -4D) == -0D);
            Assert.IsTrue(math.copysign(2D, -0D) == -2D);
            Assert.IsTrue(math.copysign(-2D, 0D) == 2D);
            Assert.IsTrue(math.copysign(System.Double.PositiveInfinity, -2D) == System.Double.NegativeInfinity);
            Assert.IsTrue(math.copysign(2D, System.Double.NegativeInfinity) == -2D);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.copysign(0D, -0D) = -0D);
            Assert.IsTrue(math.copysign(0D, -4D) = -0D);
            Assert.IsTrue(math.copysign(2D, -0D) = -2D);
            Assert.IsTrue(math.copysign(-2D, 0D) = 2D);
            Assert.IsTrue(math.copysign(System.Double.PositiveInfinity, -2D) = System.Double.NegativeInfinity);
            Assert.IsTrue(math.copysign(2D, System.Double.NegativeInfinity) = -2D);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.copysign(System.Single,System.Single)">
            <summary>
            Copies the sign of <paramref name="number2"/> to <paramref name="number1"/>.
            </summary>
            <param name="number1">A floating-point number.</param>
            <param name="number2">A floating-point number.</param>
            <returns>The floating-point number whose absolute value is that of <paramref name="number1"/> with the sign of <paramref name="number2"/>.</returns>
            <remarks>
            <para>
            <see cref="M:MachineCognitus.math.copysign(System.Single,System.Single)"/> is the only portable way to manipulate the sign of a <see cref="F:System.Single.NaN"/> value (to examine
            the sign of a <see cref="F:System.Single.NaN"/>, <see cref="M:MachineCognitus.math.signbit(System.Single)"/> may also be used). 
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/copysign">copysign</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.copysign(0F, -0F) == -0F);
            Assert.IsTrue(math.copysign(0F, -4F) == -0F);
            Assert.IsTrue(math.copysign(2F, -0F) == -2F);
            Assert.IsTrue(math.copysign(-2F, 0F) == 2F);
            Assert.IsTrue(math.copysign(System.Single.PositiveInfinity, -2F) == System.Single.NegativeInfinity);
            Assert.IsTrue(math.copysign(2F, System.Single.NegativeInfinity) == -2F);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.copysign(0F, -0F) = -0F);
            Assert.IsTrue(math.copysign(0F, -4F) = -0F);
            Assert.IsTrue(math.copysign(2F, -0F) = -2F);
            Assert.IsTrue(math.copysign(-2F, 0F) = 2F);
            Assert.IsTrue(math.copysign(System.Single.PositiveInfinity, -2F) = System.Single.NegativeInfinity);
            Assert.IsTrue(math.copysign(2F, System.Single.NegativeInfinity) = -2F);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.nextafter(System.Double,System.Double)">
            <summary>
            Gets the floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.
            </summary>
            <param name="fromNumber">A floating-point number.</param>
            <param name="towardNumber">A floating-point number.</param>
            <returns>The floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.</returns>
            <remarks>
            <para>
            IEC 60559 recommends that <paramref name="fromNumber"/> be returned whenever <c><paramref name="fromNumber"/> == <paramref name="towardNumber"/></c>.
            These functions return <paramref name="towardNumber"/> instead, which makes the behavior around zero consistent: <c><see cref="M:MachineCognitus.math.nextafter(System.Double,System.Double)">nextafter</see>(-0.0, +0.0)</c>
            returns <c>+0.0</c> and <c><see cref="M:MachineCognitus.math.nextafter(System.Double,System.Double)">nextafter</see>(+0.0, -0.0)</c> returns <c>–0.0</c>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/nextafter">nextafter</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.nextafter(0D, 0D) == 0D);
            Assert.IsTrue(math.nextafter(-0D, 0D) == 0D;
            Assert.IsTrue(math.nextafter(0D, -0D) == -0D);
            
            Assert.IsTrue(math.nextafter(math.DBL_MIN, 0D) == math.DBL_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.DBL_DENORM_MIN, 0D) == 0D);
            Assert.IsTrue(math.nextafter(math.DBL_MIN, -0D) == math.DBL_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.DBL_DENORM_MIN, -0D) == 0D);
            
            Assert.IsTrue(math.nextafter(0D, System.Double.PositiveInfinity) == math.DBL_DENORM_MIN);
            Assert.IsTrue(math.nextafter(-0D, System.Double.NegativeInfinity) == -math.DBL_DENORM_MIN);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.nextafter(0D, 0D) = 0D);
            Assert.IsTrue(math.nextafter(-0D, 0D) = 0D);
            Assert.IsTrue(math.nextafter(0D, -0D) = -0D);
            
            Assert.IsTrue(math.nextafter(math.DBL_MIN, 0D) = math.DBL_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.DBL_DENORM_MIN, 0D) = 0D);
            Assert.IsTrue(math.nextafter(math.DBL_MIN, -0D) = math.DBL_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.DBL_DENORM_MIN, -0D) = 0D);
            
            Assert.IsTrue(math.nextafter(0D, System.Double.PositiveInfinity) = math.DBL_DENORM_MIN);
            Assert.IsTrue(math.nextafter(-0D, System.Double.NegativeInfinity) = -math.DBL_DENORM_MIN);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.nextafter(System.Single,System.Single)">
            <summary>
            Gets the floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.
            </summary>
            <param name="fromNumber">A floating-point number.</param>
            <param name="towardNumber">A floating-point number.</param>
            <returns>The floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.</returns>
            <remarks>
            <para>
            IEC 60559 recommends that <paramref name="fromNumber"/> be returned whenever <c><paramref name="fromNumber"/> == <paramref name="towardNumber"/></c>.
            These functions return <paramref name="towardNumber"/> instead, which makes the behavior around zero consistent: <c><see cref="M:MachineCognitus.math.nextafter(System.Single,System.Single)">nextafter</see>(-0.0, +0.0)</c>
            returns <c>+0.0</c> and <c><see cref="M:MachineCognitus.math.nextafter(System.Single,System.Single)">nextafter</see>(+0.0, -0.0)</c> returns <c>–0.0</c>.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/nextafter">nextafter</a> in the C standard documentation.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.nextafter(0F, 0F) == 0F);
            Assert.IsTrue(math.nextafter(-0F, 0F) == 0F;
            Assert.IsTrue(math.nextafter(0F, -0F) == -0F);
            
            Assert.IsTrue(math.nextafter(math.FLT_MIN, 0D) == math.FLT_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.FLT_DENORM_MIN, 0F) == 0F);
            Assert.IsTrue(math.nextafter(math.FLT_MIN, -0F) == math.FLT_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.FLT_DENORM_MIN, -0F) == 0F);
            
            Assert.IsTrue(math.nextafter(0F, System.Single.PositiveInfinity) == math.FLT_DENORM_MIN);
            Assert.IsTrue(math.nextafter(-0F, System.Single.NegativeInfinity) == -math.FLT_DENORM_MIN);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.nextafter(0F, 0F) = 0F);
            Assert.IsTrue(math.nextafter(-0F, 0F) = 0F);
            Assert.IsTrue(math.nextafter(0F, -0F) = -0F);
            
            Assert.IsTrue(math.nextafter(math.FLT_MIN, 0F) = math.FLT_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.FLT_DENORM_MIN, 0F) = 0F);
            Assert.IsTrue(math.nextafter(math.FLT_MIN, -0F) = math.FLT_DENORM_MAX);
            Assert.IsTrue(math.nextafter(math.FLT_DENORM_MIN, -0F) = 0F);
            
            Assert.IsTrue(math.nextafter(0F, System.Single.PositiveInfinity) = math.FLT_DENORM_MIN);
            Assert.IsTrue(math.nextafter(-0F, System.Single.NegativeInfinity) = -math.FLT_DENORM_MIN);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.nexttoward(System.Double,System.Double)">
            <summary>
            Gets the floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.
            </summary>
            <param name="fromNumber">A floating-point number.</param>
            <param name="towardNumber">A floating-point number.</param>
            <returns>The floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.</returns>
            <remarks>
            <para>
            IEC 60559 recommends that <paramref name="fromNumber"/> be returned whenever <c><paramref name="fromNumber"/> == <paramref name="towardNumber"/></c>.
            These functions return <paramref name="towardNumber"/> instead, which makes the behavior around zero consistent: <c><see cref="M:MachineCognitus.math.nexttoward(System.Double,System.Double)">nexttoward</see>(-0.0, +0.0)</c>
            returns <c>+0.0</c> and <c><see cref="M:MachineCognitus.math.nexttoward(System.Double,System.Double)">nexttoward</see>(+0.0, -0.0)</c> returns <c>–0.0</c>.
            </para>
            <para>
            The <see cref="M:MachineCognitus.math.nexttoward(System.Double,System.Double)"/> function is equivalent to the <see cref="M:MachineCognitus.math.nextafter(System.Double,System.Double)"/> function.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/nextafter">nexttoward</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.nexttoward(System.Single,System.Single)">
            <summary>
            Gets the floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.
            </summary>
            <param name="fromNumber">A floating-point number.</param>
            <param name="towardNumber">A floating-point number.</param>
            <returns>The floating-point number that is next after <paramref name="fromNumber"/> in the direction of <paramref name="towardNumber"/>.</returns>
            <remarks>
            <para>
            IEC 60559 recommends that <paramref name="fromNumber"/> be returned whenever <c><paramref name="fromNumber"/> == <paramref name="towardNumber"/></c>.
            These functions return <paramref name="towardNumber"/> instead, which makes the behavior around zero consistent: <c><see cref="M:MachineCognitus.math.nexttoward(System.Single,System.Single)">nexttoward</see>(-0.0, +0.0)</c>
            returns <c>+0.0</c> and <c><see cref="M:MachineCognitus.math.nexttoward(System.Single,System.Single)">nexttoward</see>(+0.0, -0.0)</c> returns <c>–0.0</c>.
            </para>
            <para>
            The <see cref="M:MachineCognitus.math.nexttoward(System.Single,System.Single)"/> function is equivalent to the <see cref="M:MachineCognitus.math.nextafter(System.Single,System.Single)"/> function.
            </para>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/nextafter">nexttoward</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.exponent(System.Double)">
            <summary>
            Gets the exponent bits of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The exponent bits of the specified floating-point <paramref name="number"/>; i.e. the biased exponent.</returns>
            <remarks>
            <list type="table">
                <listheader>
                   <term><paramref name="number"/></term> 
                   <description>Biased Exponent</description> 
                   <description>Unbiased Exponent</description> 
                </listheader>
                <item>
                    <term><c>±<see cref="F:System.Double.NaN"/></c></term>
                    <description><c>2047</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.DBL_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c><see cref="F:System.Double.PositiveInfinity"/></c></term>
                    <description><c>2047</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.DBL_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c><see cref="F:System.Double.NegativeInfinity"/></c></term>
                    <description><c>2047</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.DBL_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.DBL_MAX"/></c></term>
                    <description><c>2046</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MAX"/> + <see cref="F:MachineCognitus.math.DBL_EXP_BIAS"/></c>)</description>
                    <description><c>1023</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MAX"/></c>)</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.DBL_MIN"/></c></term>
                    <description><c>1</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MIN"/> + <see cref="F:MachineCognitus.math.DBL_EXP_BIAS"/></c>)</description>
                    <description><c>-1022</c> (<c><see cref="F:MachineCognitus.math.DBL_EXP_MIN"/></c>)</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.DBL_DENORM_MAX"/></c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.DBL_DENORM_MIN"/></c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
                <item>
                    <term><c>±0</c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.exponent(System.Single)">
            <summary>
            Gets the exponent bits of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The exponent bits of the specified floating-point <paramref name="number"/>; i.e. the biased exponent.</returns>
            <remarks>
            <list type="table">
                <listheader>
                   <term><paramref name="number"/></term> 
                   <description>Biased Exponent</description> 
                   <description>Unbiased Exponent</description> 
                </listheader>
                <item>
                    <term><c>±<see cref="F:System.Single.NaN"/></c></term>
                    <description><c>255</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.FLT_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c><see cref="F:System.Single.PositiveInfinity"/></c></term>
                    <description><c>255</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.FLT_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c><see cref="F:System.Single.NegativeInfinity"/></c></term>
                    <description><c>255</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.FLT_EXP_BIAS"/></c>)</description>
                    <description>N/A</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.FLT_MAX"/></c></term>
                    <description><c>255</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.FLT_EXP_BIAS"/></c>)</description>
                    <description><c>128</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1</c>)</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.FLT_MIN"/></c></term>
                    <description><c>255</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1 + <see cref="F:MachineCognitus.math.FLT_EXP_BIAS"/></c>)</description>
                    <description><c>-127</c> (<c><see cref="F:MachineCognitus.math.FLT_EXP_MAX"/> + 1</c>)</description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.FLT_DENORM_MAX"/></c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
                <item>
                    <term><c>±<see cref="F:MachineCognitus.math.FLT_DENORM_MIN"/></c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
                <item>
                    <term><c>±0</c></term>
                    <description><c>0</c></description>
                    <description><c>0</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.mantissa(System.Double)">
            <summary>
            Gets the mantissa bits of the specified floating-point <paramref name="number"/> without the implicit leading <c>1</c> bit.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The mantissa bits of the specified floating-point <paramref name="number"/> without the implicit leading <c>1</c> bit.</returns>
            <remarks></remarks>
        </member>
        <member name="M:MachineCognitus.math.mantissa(System.Single)">
            <summary>
            Gets the mantissa bits of the specified floating-point <paramref name="number"/> without the implicit leading <c>1</c> bit.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The mantissa bits of the specified floating-point <paramref name="number"/> without the implicit leading <c>1</c> bit.</returns>
            <remarks></remarks>
        </member>
        <member name="M:MachineCognitus.math.significand(System.Double)">
            <summary>
            Gets the significand of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The significand of the specified floating-point <paramref name="number"/>, or <paramref name="number"/> if it not normal or subnormal.</returns>
            <remarks>
            <para>
            The significand is a number in the interval <c>[1, 2)</c> so that 
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Double)">significand</see>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.logb(System.Double)">logb</see>(<paramref name="number"/>)</c>.
            If <paramref name="number"/> is subnormal, it is normalized so that the significand falls in the interval <c>[1, 2)</c>.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.significand(0D) == 0D);
            Assert.IsTrue(math.significand(-0D) == -0D);
            Assert.IsTrue(math.significand(1D) == 1D);
            Assert.IsTrue(math.significand(4D) == 1D);
            Assert.IsTrue(math.significand(6D) == 1.5D);
            Assert.IsTrue(math.significand(7D) == 1.75D);
            Assert.IsTrue(math.significand(8D) == 1D);
            Assert.IsTrue(math.significand(math.DBL_DENORM_MIN) == 1D);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.significand(0D) = 0D);
            Assert.IsTrue(math.significand(-0D) = -0D);
            Assert.IsTrue(math.significand(1D) = 1D);
            Assert.IsTrue(math.significand(4D) = 1D);
            Assert.IsTrue(math.significand(6D) = 1.5D);
            Assert.IsTrue(math.significand(7D) = 1.75D);
            Assert.IsTrue(math.significand(8D) = 1D);
            Assert.IsTrue(math.significand(math.DBL_DENORM_MIN) = 1D);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.significand(System.Single)">
            <summary>
            Gets the significand of the specified floating-point <paramref name="number"/>.
            </summary>
            <param name="number">A floating-point number.</param>
            <returns>The significand of the specified floating-point <paramref name="number"/>, or <paramref name="number"/> if it not normal or subnormal.</returns>
            <remarks>
            <para>
            The significand is a number in the interval <c>[1, 2)</c> so that 
            <c><paramref name="number"/> = <see cref="M:MachineCognitus.math.significand(System.Single)"/>(<paramref name="number"/>) * 2^<see cref="M:MachineCognitus.math.logb(System.Single)"/>(<paramref name="number"/>)</c>.
            If <paramref name="number"/> is subnormal, it is normalized so that the significand falls in the interval <c>[1, 2)</c>.
            </para>
            </remarks>
            <example>
            <code language="C#">
            Assert.IsTrue(math.significand(0F) == 0F);
            Assert.IsTrue(math.significand(-0F) == -0F);
            Assert.IsTrue(math.significand(1F) == 1F);
            Assert.IsTrue(math.significand(4F) == 1F);
            Assert.IsTrue(math.significand(6F) == 1.5F);
            Assert.IsTrue(math.significand(7F) == 1.75F);
            Assert.IsTrue(math.significand(8F) == 1F);
            Assert.IsTrue(math.significand(math.FLT_DENORM_MIN) == 1F);
            </code> 
            <code language="VB.NET">
            Assert.IsTrue(math.significand(0F) = 0F);
            Assert.IsTrue(math.significand(-0F) = -0F);
            Assert.IsTrue(math.significand(1F) = 1F);
            Assert.IsTrue(math.significand(4F) = 1F);
            Assert.IsTrue(math.significand(6F) = 1.5F);
            Assert.IsTrue(math.significand(7F) = 1.75F);
            Assert.IsTrue(math.significand(8F) = 1F);
            Assert.IsTrue(math.significand(math.FLT_DENORM_MIN) = 1F);
            </code> 
            </example>
        </member>
        <member name="M:MachineCognitus.math.isunordered(System.Double,System.Double)">
            <summary>
            Gets a value that indicates whether two floating-point numbers are unordered.
            </summary>
            <param name="number1">A floating-point number.</param>
            <param name="number2">A floating-point number.</param>
            <returns><c>true</c> if either <paramref name="number1"/> or <paramref name="number1"/> is <see cref="F:System.Double.NaN"/>, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isunordered">isunordered</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.isunordered(System.Single,System.Single)">
            <summary>
            Gets a value that indicates whether two floating-point numbers are unordered.
            </summary>
            <param name="number1">A floating-point number.</param>
            <param name="number2">A floating-point number.</param>
            <returns><c>true</c> if either <paramref name="number1"/> or <paramref name="number1"/> is <see cref="F:System.Single.NaN"/>, <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            See <a href="http://en.cppreference.com/w/c/numeric/math/isunordered">isunordered</a> in the C standard documentation.
            </para>
            </remarks>
        </member>
        <member name="M:MachineCognitus.math.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 32-bit signed integer.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A 32-bit signed integer whose value is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MachineCognitus.math.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A double-precision floating point number whose value is equivalent to <paramref name="value"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NumpyLib.numpyinternal.local_search_left(NumpyLib.NpyArray,NumpyLib.NpyArray,NumpyLib.NpyArray)" -->
        <!-- Badly formed XML comment ignored for member "M:NumpyLib.numpyinternal.local_search_right(NumpyLib.NpyArray,NumpyLib.NpyArray,NumpyLib.NpyArray)" -->
        <!-- Badly formed XML comment ignored for member "M:NumpyLib.numpyAPI.NpyArray_dealloc(NumpyLib.NpyArray)" -->
    </members>
</doc>
